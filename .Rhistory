org_farming == 0 & Nex_total >0 & ((Nex_total * (Morg_SAU_c/sum_Morg_SAU_c)) / SAU_c) >= Norg_thrhld_min_conv  ~ T,
#### Organic
org_farming == 1 & Nex_total >0 & ((Nex_total * (Morg_SAU_c/sum_Morg_SAU_c)) / SAU_c) >= Norg_thrhld_min_bio  ~ T,
.default = F
),
### estimate N org
A.4.5_org = case_when(
### if livestock: N excreted from livestock
livestock == T ~ (Nex_total * (Morg_SAU_c/sum_Morg_SAU_c)) / SAU_c,
### if no or not enough livestock: average organic fertilizer input
livestock == F & org_farming == 0 ~ N_org_Conventionel,
livestock == F & org_farming == 1 ~ N_org_Bio
),
# A.4.5, kg N ha-1
A.4.5 = A.4.5_min + A.4.5_org
) %>% ungroup()
tmp = left_join(tmp_N_ferti %>%
group_by(farm_id) %>%
summarise(xi = sum(A.4.5_min*SAU_c)),
tmp_input %>%
select(farm_id,org_farming,CONSON)) %>%
mutate(comp = case_when(round(xi,0) == round(CONSON,0) ~T,.default = F))
table(tmp$comp)
# compare sum to original value
tmp_check_farm_id <- sort(sample(tmp_N_ferti$farm_id,size = 15))
tmp_check1 <- tmp_N_ferti %>%
group_by(farm_id,org_farming) %>%
summarise(sum_pest = sum(A.5.1*SAU_c))
tmp_check1 <- tmp_N_ferti %>%
group_by(farm_id,org_farming) %>%
summarise(sum_pest = sum(A.4.5_min*SAU_c))
tmp_check2 <- tmp_input %>%
select(ID,CONSON)
# compare sum to original value
tmp_check_farm_id <- sort(sample(tmp_N_ferti$farm_id,size = 15))
tmp_check1 <- tmp_N_ferti %>%
group_by(farm_id,org_farming) %>%
summarise(sum_pest = sum(A.4.5_min*SAU_c))
tmp_check2 <- tmp_input %>%
select(ID,CONSON)
# compare sum to original value
tmp_check_farm_id <- sort(sample(tmp_N_ferti$farm_id,size = 15))
tmp_check1 <- tmp_N_ferti %>%
group_by(farm_id,org_farming) %>%
summarise(sum_pest = sum(A.4.5_min*SAU_c))
tmp_check1 <- tmp_N_ferti %>%
filter(farm_id %in% tmp_check_farm_id) %>%
group_by(farm_id,org_farming) %>%
summarise(sum_pest = sum(A.4.5_min*SAU_c))
tmp_check2 <- tmp_input %>%
filter(farm_id %in% tmp_check_farm_id)
tmp_check <- left_join(
tmp_check1,
tmp_check2
)
table(round(tmp_check$sum_pest) == round(tmp_check$IPROT_V))
table(round(tmp_check$sum_pest) == round(tmp_check$CONSON))
BV_A.5.1 = tmp_pesticides %>%
select(farm_id,crop,A.5.1) %>%
ungroup()
source("scripts/BVI_A31.R",local = knitr::knit_global())
source("scripts/BVI_A45.R",local = knitr::knit_global())
source("scripts/BVI_A51.R",local = knitr::knit_global())
save.image("~/FADN2Footprint/.RData")
source("scripts/BVI_crops.R",local = knitr::knit_global())
if (my_BD == "FADN") {
# average for crops
## estimates the average agricultural practices
tmp_ref_farm_crops <- BVI_to_RICA_crops %>%
# estimate national averages for yield, BVI / ha and BVI / kg
group_by(crop,org_farming) %>%
summarise(
# !!! check les n : certains sont <3
n = n(),
# !!! na.rm = T pour test code mais ptetre à enlever par la suite
yield = mean(yield,na.rm = T),
A.3.1_max = mean(A.3.1_max,na.rm = T),
A.4.5_max = mean(A.4.5_max,na.rm = T),
A.4.5_min_max = mean(A.4.5_min_max,na.rm = T),
A.4.5_org_max = mean(A.4.5_org_max,na.rm = T),
A.5.1_max = mean(A.5.1,na.rm = T),
BVI_ha = mean(BVI_ha,na.rm = T),
BVI_kg = mean(BVI_kg,na.rm = T)
) %>% ungroup()
}
if (my_DB == "FADN") {
# average for crops
## estimates the average agricultural practices
tmp_ref_farm_crops <- BVI_to_RICA_crops %>%
# estimate national averages for yield, BVI / ha and BVI / kg
group_by(crop,org_farming) %>%
summarise(
# !!! check les n : certains sont <3
n = n(),
# !!! na.rm = T pour test code mais ptetre à enlever par la suite
yield = mean(yield,na.rm = T),
A.3.1_max = mean(A.3.1_max,na.rm = T),
A.4.5_max = mean(A.4.5_max,na.rm = T),
A.4.5_min_max = mean(A.4.5_min_max,na.rm = T),
A.4.5_org_max = mean(A.4.5_org_max,na.rm = T),
A.5.1_max = mean(A.5.1,na.rm = T),
BVI_ha = mean(BVI_ha,na.rm = T),
BVI_kg = mean(BVI_kg,na.rm = T)
) %>% ungroup()
}
tmp_pseudofarm_purchased_fr <- feed_purchased %>%
# add production methods
left_join(.,BVI_to_RICA_crops %>% select(farm_id,org_farming) %>% distinct()) %>%
# filter
filter(
# farms kept in BVI
farm_id %in% BVI_to_RICA_crops$farm_id
) %>%
# estimate yield, BVI / ha and BVI / kg
rowwise() %>%
mutate(
yield = mean(tmp_ref_farm_crops$yield[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
SAU_c_ha = DM_kg_p_crop / yield,
# BVI parameters
A.3.1_max = mean(tmp_ref_farm_crops$A.3.1_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.4.5_max = mean(tmp_ref_farm_crops$A.4.5_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.4.5_min_max = mean(tmp_ref_farm_crops$A.4.5_min_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.4.5_org_max = mean(tmp_ref_farm_crops$A.4.5_org_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.5.1_max = mean(tmp_ref_farm_crops$A.5.1_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
# BVI
BVI_ha = mean(tmp_ref_farm_crops$BVI_ha[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
BVI_kg = mean(tmp_ref_farm_crops$BVI_kg[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))])
) %>% ungroup()
tmp_pseudofarm_purchased_fr <- feed_purchased %>%
# add production methods
left_join(.,BVI_to_RICA_crops %>% select(farm_id,org_farming) %>% distinct()) %>%
# filter
filter(
# farms kept in BVI
farm_id %in% BVI_to_RICA_crops$farm_id
) %>%
# estimate yield, BVI / ha and BVI / kg
rowwise() %>%
mutate(
yield = mean(tmp_ref_farm_crops$yield[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
SAU_c_ha = DM_kg_crop / yield,
# BVI parameters
A.3.1_max = mean(tmp_ref_farm_crops$A.3.1_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.4.5_max = mean(tmp_ref_farm_crops$A.4.5_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.4.5_min_max = mean(tmp_ref_farm_crops$A.4.5_min_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.4.5_org_max = mean(tmp_ref_farm_crops$A.4.5_org_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
A.5.1_max = mean(tmp_ref_farm_crops$A.5.1_max[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
# BVI
BVI_ha = mean(tmp_ref_farm_crops$BVI_ha[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))]),
BVI_kg = mean(tmp_ref_farm_crops$BVI_kg[
# by production methods (i.e. organic or conventional) & by crop
tmp_ref_farm_crops$org_farming == org_farming & tmp_ref_farm_crops$crop %in% unlist(strsplit(crop,";"))])
) %>% ungroup()
tmp_soybean <- tibble(
"param" = c("A.3.1","A.4.5","A.4.5_min","A.4.5_org","A.5.1"),
"wheat_Lindner" = c(1.488558,180.7,162.7,18,51580.36245417),
"soy_Lindner" = c(1.2926064,0,0,0,36888.53241),
"wheat_RICA" = c(mean(BV_A.3.1$A.3.1[BV_A.3.1$crop == 111]),
mean(BV_A.4.5$A.4.5[BV_A.4.5$crop == 111]),
mean(BV_A.4.5$A.4.5_min[BV_A.4.5$crop == 111]),
mean(BV_A.4.5$A.4.5_org[BV_A.4.5$crop == 111]),
mean(BV_A.5.1$A.5.1[BV_A.5.1$crop == 111]))
) %>%
mutate(
soy_RICA = soy_Lindner * wheat_RICA / wheat_Lindner
)
# then we applied the BVI model to these estimated parameters
## import constant from Lindner 2019 SM
# import constant from Lindner 2019 SM
tmp_BV_constant <-  read_excel("data_in/supp_data.xlsx",sheet = "Lindner_2019_BV_LU_function_con")
tmp_BVI_soy <- tmp_soybean %>%
select(param,soy_RICA) %>%
rename(x = soy_RICA) %>%
rowwise() %>%
mutate(
# estimate max values for each parameter
max = case_when(
param == "A.3.1" ~ quantile(unique(BV_A.3.1$A.3.1),0.95,na.rm = T),
param == "A.4.5" ~ quantile(unique(BV_A.4.5$A.4.5),0.95,na.rm = T),
param == "A.4.5_min" ~ quantile(unique(BV_A.4.5$A.4.5_min),0.95,na.rm = T),
param == "A.4.5_org" ~ quantile(unique(BV_A.4.5$A.4.5_org),0.95,na.rm = T),
param == "A.5.1" ~ quantile(unique(BV_A.5.1$A.5.1),0.95,na.rm = T)
),
# normalize data
x_norm = case_when(
x > max ~ 1,
.default =  x / max ),
## calculate BV
y = case_when(
x_norm == 0 ~ 1,
x_norm == 1 ~ 0,
.default = tmp_BV_constant$gamma[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)] +
tmp_BV_constant$epsilon[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)] *
exp(-(abs(((x_norm^tmp_BV_constant$delta[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)]) -
tmp_BV_constant$beta[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)]) ^
tmp_BV_constant$alpha[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)]) /
(2*tmp_BV_constant$sigma[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)] ^
tmp_BV_constant$alpha[tmp_BV_constant$metric_number == str_sub(param,start = 1,end = 5)])))
),
## constrain BV
y = case_when(
y <0 ~ 0,
y >1 ~ 1,
.default = y
) ) %>%
pivot_wider(names_from = param,values_from = !param) %>%
# ??? how to change name paste order in pivot wider ?
rename(
# x
A.3.1 = x_A.3.1,
A.4.5 = x_A.4.5,
A.4.5_min = x_A.4.5_min,
A.4.5_org = x_A.4.5_org,
A.5.1 = x_A.5.1,
# max
A.3.1_max = max_A.3.1,
A.4.5_max = max_A.4.5,
A.4.5_min_max = max_A.4.5_min,
A.4.5_org_max = max_A.4.5_org,
A.5.1_max = max_A.5.1,
# norm
A.3.1_norm = x_norm_A.3.1,
A.4.5_norm = x_norm_A.4.5,
A.4.5_min_norm = x_norm_A.4.5_min,
A.4.5_org_norm = x_norm_A.4.5_org,
A.5.1_norm = x_norm_A.5.1,
# y
A.3.1_y = y_A.3.1,
A.4.5_y = y_A.4.5,
A.4.5_min_y = y_A.4.5_min,
A.4.5_org_y = y_A.4.5_org,
A.5.1_y = y_A.5.1) %>%
mutate(
## Land use specific biodiversity value
BV_LU = (A.3.1_y + A.4.5_y + A.5.1_y)/3, # average
# set BV_norm min and max according to Lindner et al. (2019)
# Normalize BV_LU
BV_norm = (1/6)+BV_LU*((2/3)-(1/6)),
## Local biodiversity value
BV_loc = case_when(
## !!! quality check : why a case_when ??? is there a lot of BV_loc <0 ???
1.017626088*(1-exp(-4.055847776*BV_norm))<0 ~ 0,
.default = 1.017626088*(1-exp(-4.055847776*BV_norm))),
## !!! quality check : why a case_when ??? is there a lot of deltaQ_loc NAs ???
BVI_ha = case_when(
is.finite(1 - BV_loc) == F ~ 0.5,
.default = 1 - BV_loc),
# yield estimated from Overmars et al., 2015 as 2.45 t ha-1 for soy cultivated in Latin America
yield = 2.45*10^3,
# BVI / kg
BVI_kg = BVI_ha / yield,
# add crop code
crop = 223,
feed_type = "feed_concent",
feed_origin = "feed_purchased"
) %>%
select(feed_origin,feed_type,crop,
#A.3.1,A.4.5,A.4.5_min,A.4.5_org,A.5.1,
A.3.1_max,A.4.5_max,A.4.5_min_max,A.4.5_org_max,A.5.1_max,
BVI_ha,yield,BVI_kg) %>%
# remove attributes
mutate(across(everything(),as.vector))
# replace soybean values in pseudofarm
tmp_pseudofarm_purchased <- tmp_pseudofarm_purchased_fr %>%
mutate(
yield = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$yield[1],
.default = yield
),
SAU_c_ha = case_when(
crop == "223" & feed_type == "feed_concent" ~ DM_kg_p_crop / tmp_BVI_soy$yield[1],
.default = SAU_c_ha
),
# BVI parameters
A.3.1_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.3.1_max[1],
.default = A.3.1_max
),
A.4.5_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.4.5_max[1],
.default = A.4.5_max
),
A.4.5_min_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.4.5_min_max[1],
.default = A.4.5_min_max
),
A.4.5_org_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.4.5_org_max[1],
.default = A.4.5_org_max
),
A.5.1_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.5.1_max[1],
.default = A.5.1_max
),
# BVI
BVI_ha = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$BVI_ha[1],
.default = BVI_ha
),
BVI_kg = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$BVI_kg[1],
.default = BVI_kg
)
)
# replace soybean values in pseudofarm
tmp_pseudofarm_purchased <- tmp_pseudofarm_purchased_fr %>%
mutate(
yield = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$yield[1],
.default = yield
),
SAU_c_ha = case_when(
crop == "223" & feed_type == "feed_concent" ~ DM_kg_crop / tmp_BVI_soy$yield[1],
.default = SAU_c_ha
),
# BVI parameters
A.3.1_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.3.1_max[1],
.default = A.3.1_max
),
A.4.5_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.4.5_max[1],
.default = A.4.5_max
),
A.4.5_min_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.4.5_min_max[1],
.default = A.4.5_min_max
),
A.4.5_org_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.4.5_org_max[1],
.default = A.4.5_org_max
),
A.5.1_max = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$A.5.1_max[1],
.default = A.5.1_max
),
# BVI
BVI_ha = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$BVI_ha[1],
.default = BVI_ha
),
BVI_kg = case_when(
crop == "223" & feed_type == "feed_concent" ~ tmp_BVI_soy$BVI_kg[1],
.default = BVI_kg
)
)
tmp_pseudofarm_produced <- feed_produced %>%
# add production method, yields and BVI
inner_join(BVI_to_RICA_crops %>% select(farm_id,org_farming,crop,yield,A.3.1_max,A.4.5_max,A.4.5_min_max,A.4.5_org_max,A.5.1_max,BVI_ha,BVI_kg)) %>%
# recalculate SAU_c_ha for feed
mutate(SAU_c_ha = DM_kg_crop / yield)
tmp_pseudofarm_grassland <- feed_grassland %>%
# add yields and BVI
inner_join(BVI_to_RICA_crops %>% select(farm_id,org_farming,crop,yield,A.3.1_max,A.4.5_max,A.4.5_min_max,A.4.5_org_max,A.5.1_max,BVI_ha,BVI_kg)) %>%
# recalculate SAU_c_ha for feed
mutate(SAU_c_ha = DM_kg_crop / yield)
feed_by_pseudofarm = Reduce(rbind,list(
tmp_pseudofarm_produced %>%
mutate(feed_origin = "feed_produced"),
tmp_pseudofarm_purchased %>%
mutate(feed_origin = "feed_purchased"),
tmp_pseudofarm_grassland %>%
mutate(feed_origin = "feed_grassland")))
table(is.na(feed_by_pseudofarm$BVI_ha))
table(is.na(feed_by_pseudofarm$BVI_kg))
# transfert table
tmp_FADN_code <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_livestock_code")
tmp_TT_livestock0 <- read_xlsx("data_in/supp_data.xlsx", sheet ="TT_livestock")
tmp_TT_livestock <- left_join(
tmp_FADN_code %>% rename(code_livestock = code_letter),
tmp_TT_crops0 %>% rename(code_livestock = FADN_code_letter) %>% select(code_livestock)
) %>% distinct()
tmp_TT_livestock <- left_join(
tmp_FADN_code,
tmp_TT_livestock0)
tmp_TT_livestock <- left_join(
tmp_FADN_code,
tmp_TT_livestock0) %>%
rename(code_livestock = FADN_code_letter) %>%
select(code_livestock,species) %>%
distinct()
colnames(feed_by_livestock)
tmp_pseudofarm_livestock_n_feed <- feed_by_livestock %>%
inner_join(.,feed_by_pseudofarm %>% select(farm_id,crop,feed_origin,org_farming,yield,A.3.1_max,A.4.5_max,A.4.5_min_max,A.4.5_org_max,A.5.1_max,BVI_ha,BVI_kg)) %>%
inner_join(.,tmp_TT_livestock %>% select(code_livestock,species)) %>%
mutate(
SAU_c_ha = (DM_kg_crop_livestock / yield)
)
feed_by_livestock <- feed_by_livestock %>% ungroup()
BVI_to_RICA_crops <- BVI_to_RICA_crops %>% ungroup()
feed_purchased <- feed_purchased %>% ungroup()
N_excr <- N_excr %>% ungroup()
tmp_BVI_herd <- tmp_pseudofarm_livestock_n_feed %>%
# summarise BVI / herd
group_by(farm_id,species) %>%
summarise(
# number of animals per species
nb_anim = sum(EFFEC),
# total feed per animal
feed_kg_p_anim = mean(DM_kg_cropanim),
# estimate area per animal
feed_ha_p_anim = mean(DM_kg_cropanim / yield),
# total feed for species
feed_kg_p_species = sum(DM_kg_crop_livestock),
# estimate area for feed
feed_ha_p_species = sum(DM_kg_crop_livestock / yield),
# BVI_herd: total BVI of the feed for the herd
BVI_herd = sum(DM_kg_crop_livestock*BVI_kg),
# BVI_ha_feed: weighted average BVI_ha of the feed for the herd
BVI_ha_feed = sum( (DM_kg_crop_livestock / yield) * BVI_ha ) / sum(DM_kg_crop_livestock / yield)
)
colnames(feed_by_livestock)
tmp_BVI_herd <- tmp_pseudofarm_livestock_n_feed %>%
# summarise BVI / herd
group_by(farm_id,species) %>%
summarise(
# number of livestock unit per species
nb_anim = sum(livestock_unit),
# total feed per animal
feed_kg_p_anim = mean(DM_kg_crop_LU),
# estimate area per animal
feed_ha_p_anim = mean(DM_kg_crop_LU / yield),
# total feed for species
feed_kg_p_species = sum(DM_kg_crop_livestock),
# estimate area for feed
feed_ha_p_species = sum(DM_kg_crop_livestock / yield),
# BVI_herd: total BVI of the feed for the herd
BVI_herd = sum(DM_kg_crop_livestock*BVI_kg),
# BVI_ha_feed: weighted average BVI_ha of the feed for the herd
BVI_ha_feed = sum( (DM_kg_crop_livestock / yield) * BVI_ha ) / sum(DM_kg_crop_livestock / yield)
)
# quality check :
## je dois retrouver les bon totaux de population et de kg de feed
# tmp_pop
tmp_kg_feed = feed_by_pseudofarm %>% group_by(farm_id) %>% summarise(
# total feed for species
feed_kg_p_species = sum(DM_kg_crop),
# estimate area for feed
feed_ha_p_species = sum(SAU_c_ha),
# BVI_herd: total BVI of the feed for the herd
BVI_herd = sum(DM_kg_crop*BVI_kg),
# BVI_ha_feed: weighted average BVI_ha of the feed for the herd ???
BVI_ha_feed1 = BVI_herd / feed_ha_p_species,
BVI_ha_feed2 = sum( (DM_kg_crop / yield) * BVI_ha ) / sum(DM_kg_crop / yield)
)
# check ----
## je dois retrouver les bon totaux de population et de kg de feed
tmp_check <- feed_by_pseudofarm %>%
group_by(farm_id) %>%
summarise(
# total feed for species
feed_kg_p_species = sum(DM_kg_crop),
# estimate area for feed
feed_ha_p_species = sum(SAU_c_ha),
# BVI_herd: total BVI of the feed for the herd
BVI_herd = sum(DM_kg_crop*BVI_kg),
# BVI_ha_feed: weighted average BVI_ha of the feed for the herd ???
BVI_ha_feed1 = BVI_herd / feed_ha_p_species,
BVI_ha_feed2 = sum( (DM_kg_crop / yield) * BVI_ha ) / sum(DM_kg_crop / yield)
)
# check ----
## je dois retrouver les bon totaux de population et de kg de feed
tmp_check <- feed_by_pseudofarm %>%
group_by(farm_id) %>%
summarise(
# total feed for species
feed_kg_p_species = sum(DM_kg_crop),
# estimate area for feed
feed_ha_p_species = sum(SAU_c_ha),
# BVI_herd: total BVI of the feed for the herd
BVI_herd = sum(DM_kg_crop*BVI_kg),
# BVI_ha_feed: weighted average BVI_ha of the feed for the herd ???
BVI_ha_feed1 = BVI_herd / feed_ha_p_species,
BVI_ha_feed2 = sum( (DM_kg_crop / yield) * BVI_ha ) / sum(DM_kg_crop / yield)
) %>%
mutate(check = round(BVI_ha_feed1) == round(BVI_ha_feed2))
table(tmp_check$check)
BVI_to_RICA_herd <- tmp_BVI_herd %>% ungroup()
length(unique(BVI_to_RICA_crops$farm_id))
length(unique(BVI_to_RICA_herd$farm_id))
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
save.image("~/FADN2Footprint/.RData")
