---
title: "BiodivLabel Analysis Script"
author: "Sarah Huet"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
---

Script principal d'analyse pour la commande BiodivLabel

Quality check : 
- regarder tous .default dans les case_when : peut-être qu'il faut les enlever
- pour les valeurs manquantes dans les moyennes d'engrais ou d'IFT : peut-être mettre des moyennes par OTEX plutôt que de prendre des cultures similaires ou des moyennes générales sauf que OTEX 1500 c'est céréales et oléoprotéagineux qui n'ont pas du tout les mêmes itinéraires technique


- la des aliments achetés ne devrait pas représentée plus de 10% de la surface de la pseudoferme
- la quantité de lait /ha devrait être plus basse en bio qu'en conv

# Import data

We used the RICA 2020 data.

```{r packages}

library(readr)

library(tidyr)
library(dplyr)
library(tibble)

#rm(list = names(.GlobalEnv))
#rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

```

```{r run_model}

source("main.qmd",local = knitr::knit_global())

knitr::knit("main.qmd")

quarto_render("scripts/main.qmd")

```

# Agricultural practices

## Livestock

### Feed

Je veux vérifier mon code pour déterminer l'alimentation du bétail. Je sélectionne les fermes qui produisent le plus de lait en conventionnel, Comté et AB.

```{r test_farms}

tmp_farms_conv = c("2201871", "2501849", "5320166" )
tmp_farms_comte = c("4302448", "4322472", "4302545")
tmp_farms_bio = c("2201469","8209862", "2501904")
tmp_farms = c("2201871", "2501849", "5320166","4302448", "4322472", "4302545","2201469","8209862", "2501904")

```

Je dois retrouver la charge en aliments concentré enregistrée dans le RICA à partir de mon fichier de sortie.

```{r feed_purchased}

tmp_FADN <- FADN_18 %>%
  mutate(
    # cattle
    feed_cattle_total = SE310,
    feed_cattle_produced = SE315,
    feed_cattle_purch_concent = IGRFEDCNCTRPUR_V,
    feed_cattle_purch_rough = IGRFEDCRSPUR_V
    # pigs and poultry => maybe one day I'll take the time to estimate for those animals as well
  ) %>%
  # keep farms that purchased feed
  filter(feed_cattle_purch_concent >0 | feed_cattle_purch_rough >0) %>% # 35043 farms in FADN19
  mutate(
    # concentrate feed
    feed_concent = case_when(
      feed_cattle_purch_concent >0 ~ feed_cattle_purch_concent/99.4*1000,
      .default = 0),
    # rough feed
    feed_rough = case_when(
      feed_cattle_purch_rough >0 ~ feed_cattle_purch_rough/99.4*1000,
      .default = 0)
  )

# if I summarize feed_purchased by farm, I should find the same amount than in RICA
tmp_feed_purchased <- feed_purchased %>%
  # filter test farms and variables
  filter(ID %in% tmp_FADN$ID) %>%
  # summarize by farm and feed type
  group_by(ID,feed_type) %>%
  summarise(feed_kg_p_farm = sum(DM_kg_p_CODE3)) %>%
  pivot_wider(id_cols = ID,names_from = feed_type,values_from = feed_kg_p_farm)

setdiff(tmp_FADN$feed_concent,tmp_feed_purchased$feed_concent)

# OK !!!
  
```

Je veux vérifier la qualité des variables renseignée pour l'intraconsommation de culture au sein de la ferme.

```{r feed_produced_intraconso}

# we did not used the intra cunsumption variables because:
# QINTH3 Intraconsommations pour herbiv. (volume)
# QINTL3 Intraconsommations pour volailles (vol.)
# QINTP3 Intraconsommations pour porcins (volume)
# QINTA3 Intraconsommations pour autres animaux (vol.)


# join data
tmp_farm_crops <- RICA_2020_veg %>%
  # TEST filter test farms !!! 
  ## here all farms that produce cow milk
  #filter(IDENT %in% BVI_to_RICA_RA_SIQO_milk$IDENT) %>%
  # remove crops without area
  filter(SUPER3 >0 & QPROD3 > 0) %>%
  # summaries areas, productions and sales
  group_by(IDENT,CODE3) %>% 
  summarise(SAU_c_ha = sum(SUPER3*10^-2,na.rm = T),
            prod_kg = sum(QPROD3*10^2,na.rm = T),
            sales_kg = sum(QVENT3*10^2,na.rm = T),
            intraconsH_var_kg = sum(QINTH3*10^2,na.rm = T),
            intraconsL_var_kg = sum(QINTL3*10^2,na.rm = T),
            intraconsP_var_kg = sum(QINTP3*10^2,na.rm = T),
            intraconsA_var_kg = sum(QINTA3*10^2,na.rm = T)
            ) %>%
  mutate(prod_m_sales_kg_p_CODE3 = prod_kg - sales_kg,
         intraconso_kg_p_CODE3 = intraconsH_var_kg + intraconsL_var_kg + intraconsP_var_kg + intraconsA_var_kg)

ggplot(tmp_farm_crops) +
  aes(x = intraconso_kg_p_CODE3, y = prod_m_sales_kg_p_CODE3) +
  geom_point(shape = "circle", size = 1.5, colour = "#112446") +
  geom_abline(intercept = 0,slope = 1)+
  theme_minimal()

# 2303 fermes ont de l'intraconsommation (836 fermes qui produisent du lait ont de l'intraconsom) :
length(unique(unique(tmp_farm_crops$IDENT[tmp_farm_crops$intraconso_kg_p_CODE3 > 0])))
# 65.2% fermes qui produisent du lait ont de l'intraconsommation
length(intersect(unique(BVI_to_RICA_RA_SIQO_milk$IDENT),
                 unique(tmp_farm_crops$IDENT[tmp_farm_crops$intraconso_kg_p_CODE3 > 0]))) /
  length(unique(BVI_to_RICA_RA_SIQO_milk$IDENT))
# 62.8% fermes qui produisent du lait ont de l'intraconsommation pour herbivore
length(intersect(unique(BVI_to_RICA_RA_SIQO_milk$IDENT),
                 unique(tmp_farm_crops$IDENT[tmp_farm_crops$intraconsH_var_kg > 0]))) /
  length(unique(BVI_to_RICA_RA_SIQO_milk$IDENT))
# 70.2% fermes qui produisent du lait ont un diff prod-vente >0
length(intersect(unique(BVI_to_RICA_RA_SIQO_milk$IDENT),
                 unique(tmp_farm_crops$IDENT[tmp_farm_crops$prod_m_sales_kg_p_CODE3 > 0]))) /
  length(unique(BVI_to_RICA_RA_SIQO_milk$IDENT))
# 18.0% fermes qui produisent du lait ont un diff prod-vente <0
length(intersect(unique(BVI_to_RICA_RA_SIQO_milk$IDENT),
                 unique(tmp_farm_crops$IDENT[tmp_farm_crops$prod_m_sales_kg_p_CODE3 < 0]))) /
  length(unique(BVI_to_RICA_RA_SIQO_milk$IDENT))
# 96.7% des fermes qui ont de l'intraconso ont aussi une diff prod-vente >0 
length(intersect(unique(tmp_farm_crops$IDENT[tmp_farm_crops$intraconso_kg_p_CODE3 > 0]),
                 unique(tmp_farm_crops$IDENT[tmp_farm_crops$prod_m_sales_kg_p_CODE3 > 0]))) /
  length(unique(tmp_farm_crops$IDENT[tmp_farm_crops$intraconso_kg_p_CODE3 > 0]))

# 47.5% des fermes qui ont une diff prod-vente >0 ont aussi de l'intraconso
length(intersect(unique(tmp_farm_crops$IDENT[tmp_farm_crops$prod_m_sales_kg_p_CODE3 > 0]),
                 unique(tmp_farm_crops$IDENT[tmp_farm_crops$intraconso_kg_p_CODE3 > 0]))) /
  length(unique(tmp_farm_crops$IDENT[tmp_farm_crops$prod_m_sales_kg_p_CODE3 > 0]))

tmp_farm_crops %>%
  filter(prod_m_sales_kg_p_CODE3 > 0 & intraconso_kg_p_CODE3 > 0) %>%
  ggplot(.) +
  aes(x = intraconso_kg_p_CODE3, y = prod_m_sales_kg_p_CODE3) +
  geom_point(shape = "circle", size = 1.5, colour = "#112446") +
  geom_abline(intercept = 0,slope = 1) +
  theme_minimal()
cor(tmp_farm_crops$prod_m_sales_kg_p_CODE3[tmp_farm_crops$prod_m_sales_kg_p_CODE3 >0 &
                                             tmp_farm_crops$intraconso_kg_p_CODE3 >0],
    tmp_farm_crops$intraconso_kg_p_CODE3[tmp_farm_crops$prod_m_sales_kg_p_CODE3 >0 &
                                             tmp_farm_crops$intraconso_kg_p_CODE3 >0])
quantile(tmp_farm_crops$prod_m_sales_kg_p_CODE3[tmp_farm_crops$prod_m_sales_kg_p_CODE3 >0])
quantile(tmp_farm_crops$intraconso_kg_p_CODE3[tmp_farm_crops$intraconso_kg_p_CODE3 >0])

```

WIP

Je dois vérifier que les proportions de culture et d'aliments achetés correspondent à ce qui a été publié dans Sailley et al., 2021


Je vérifie que je retrouve bien les totaux en kg après passage par les scripts pseudoferme et catégorie de bétail

```{r feed_types_in_pseudofarm}

tmp_feed_by_pseudofarm <- feed_by_pseudofarm %>%
  # filter test farms
  filter(IDENT %in% tmp_farms)

tmp_feed_by_livestock <- feed_by_livestock %>%
  # filter test farms
  filter(IDENT %in% tmp_farms)

# Pseudoferme VS by livestock ----
# je dois retrouver les totaux de feed entre la pseudoferme et le détail par catégorie de bétail
tmp_feed_tot <- tmp_feed_by_livestock %>% 
  group_by(IDENT,CODE3,feed_origin) %>%
  summarise(feed_tot = sum(DM_kg_p_CODE36))

setdiff(
  sort(paste0(tmp_feed_by_pseudofarm$IDENT," - ",tmp_feed_by_pseudofarm$CODE3, " = ",round(tmp_feed_by_pseudofarm$DM_kg_p_CODE3,2))),
  sort(paste0(tmp_feed_tot$IDENT," - ",tmp_feed_tot$CODE3, " = ",round(tmp_feed_tot$feed_tot,2)))  )

# => OK

# Feed purchased ----

# je dois retrouver la même quantité totale d'aliment achetés 
## je reprend le début du code dans feed_purchased.R

tmp_feed_purchased <- RICA_2020 %>%
  select(IDENT,CHRAC,CHRAG) %>%
  # filter test farms
  filter(IDENT %in% tmp_farms) %>%
  # keep farms that purchased feed
  filter(CHRAC >0 | CHRAG >0) %>% # 4040 farms in RICA20
  mutate(
    # concentrate feed
    feed_concent = case_when(
      CHRAC >0 ~ CHRAC/112.7*1000,
      .default = 0),
    # rough feed
    feed_rough = case_when(
      CHRAG >0 ~ CHRAG/112.7*1000,
      .default = 0),
    feed_kg = feed_concent + feed_rough
  ) %>%
  # sum by farm
  group_by(IDENT) %>%
  summarise(feed_tot = sum(feed_kg))

# je regarde combien je retrouve après par catégorie de bétail
tmp_feed_tot <- tmp_feed_by_livestock %>%
  filter(feed_origin == "feed_purchased") %>%
  group_by(IDENT) %>%
  summarise(feed_tot = sum(DM_kg_p_CODE36))

setdiff(
  sort(paste0(tmp_feed_purchased$IDENT, " = ",round(tmp_feed_purchased$feed_tot,2))),
  sort(paste0(tmp_feed_tot$IDENT, " = ",round(tmp_feed_tot$feed_tot,2)))  )

# => OK

# je regarde combien je retrouve après par catégorie de bétail et dans la pseudoferme
tmp_feed_tot <- tmp_feed_by_pseudofarm %>%
  filter(feed_origin == "feed_purchased") %>%
  group_by(IDENT) %>%
  summarise(feed_tot = sum(DM_kg_p_CODE3))

setdiff(
  sort(paste0(tmp_feed_purchased$IDENT, " = ",round(tmp_feed_purchased$feed_tot,2))),
  sort(paste0(tmp_feed_tot$IDENT, " = ",round(tmp_feed_tot$feed_tot,2)))  )

# => OK

# Feed produced ----

# je dois retrouver la même quantité totale d'aliment produits 
## je reprend le début du code dans feed_produced.R jusqu'à avoir tmp_feed_produced_qty

tmp_feed_produced1 <- tmp_feed_produced_qty %>%
  # filter test farms
  filter(IDENT %in% tmp_farms) %>%
  # sum by farm
  group_by(IDENT) %>%
  summarise(feed_tot = sum(feed_kg_p_CODE3))

tmp_feed_produced2 <- feed_produced %>%
  rbind(feed_grassland) %>%
  # filter test farms
  filter(IDENT %in% tmp_farms) %>%
  # sum by farm
  group_by(IDENT) %>%
  summarise(feed_tot = sum(DM_kg_p_CODE3))



# je regarde combien je retrouve après par catégorie de bétail
tmp_feed_tot <- tmp_feed_by_livestock %>%
  filter(feed_origin == "feed_produced") %>%
  group_by(IDENT) %>%
  summarise(feed_tot = sum(DM_kg_p_CODE36))




setdiff(
  sort(paste0(tmp_feed_produced$IDENT, " = ",round(tmp_feed_produced$feed_tot,2))),
  sort(paste0(tmp_feed_tot$IDENT, " = ",round(tmp_feed_tot$feed_tot,2)))  )

# => !!!






# je regarde combien je retrouve après par catégorie de bétail et dans la pseudoferme
tmp_feed_tot <- tmp_feed_by_pseudofarm %>%
  filter(feed_origin == "feed_purchased") %>%
  group_by(IDENT) %>%
  summarise(feed_tot = sum(DM_kg_p_CODE3))

setdiff(
  sort(paste0(tmp_feed_purchased$IDENT, " = ",round(tmp_feed_purchased$feed_tot,2))),
  sort(paste0(tmp_feed_tot$IDENT, " = ",round(tmp_feed_tot$feed_tot,2)))  )

```

Je dois revoir mon code pour répartir les quantité par CODE6 : ai-je vraiment besoin de passer par Sailley puis AROPAJ ? ça semble bien compliqué. Je dois ensuite vérifier que je retombe bien sur mes totaux par ferme

```{r total_DM_by_farm}

# compare feed by farm and feed by livestock wip
# total amount of feed by farm (kg year-1)
tmp1 = Reduce(rbind,list(feed_purchased %>% mutate(feed_origin = "feed_purchased"),
                                     feed_produced %>% mutate(feed_origin = "feed_produced"),
                                     feed_grassland %>% mutate(feed_origin = "feed_grassland"))) %>%
  group_by(IDENT) %>%
  summarise(total_DM_by_farm = sum(DM_kg_p_CODE3))

tmp2 = tmp_feed_by_livestock %>%
  group_by(IDENT) %>%
  summarise(total_DM_by_farm = sum(DM_kg_p_CODE36))

```



## Crops

### Tillage

### Fertilization

### Plant protection agents

### Yield


## Milk


### Share of grassland


### Amount of concentrate feed

Dans le cahier des charges du Comté, il est spécifié que l'apport d'aliments complémentaire est plafonné en moyenne troupeau à 1800 kg / vache laitière / an.

```{r kg_concentrate_p_anim}

tmp_kg_concentrate_p_anim <- feed_by_livestock %>%
  # add milk related labels
  left_join(.,)

  
  
# plot data ----

tmp_plot_data <- tmp_farms_milk %>%
  left_join(.,tmp_share_soybean) %>%
  # summarize
  group_by(FQS,app_fromage) %>% 
  summarise(
    # export rules
    n=n(),
    max_percent=max(share_soybean)/sum(share_soybean),
    n_w= sum(EXTR2),
    max_percent_w=max(share_soybean*EXTR2)/sum(share_soybean*EXTR2),
    # herd
    share_soybean_mean = mean(share_soybean, na.rm = T),
    share_soybean_sd = sd(share_soybean, na.rm = T),
    share_soybean_se = sd(share_soybean, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    share_soybean_mean_w = sum(share_soybean * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    share_soybean_sd_w = sqrt(sum(EXTR2 * ((share_soybean - share_soybean_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    share_soybean_se_w = 
      sqrt(
        ( ( (sum(EXTR2*share_soybean^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (share_soybean_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
    ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10)

# plot share area of grassland ----

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = app_fromage, y = share_soybean_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = app_fromage, y = share_soybean_mean_w,
                    ymin = share_soybean_mean_w - share_soybean_se_w*1.96, ymax = share_soybean_mean_w + share_soybean_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = app_fromage, y = share_soybean_mean_w,
                    ymin = share_soybean_mean_w - share_soybean_sd_w, ymax = share_soybean_mean_w + share_soybean_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = app_fromage,
        y=(max(tmp_plot_data$share_soybean_mean_w)+ max(tmp_plot_data$share_soybean_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$share_soybean_mean_w)-
                  max(tmp_plot_data$share_soybean_sd_w)) < 0 ~
                 (min(tmp_plot_data$share_soybean_mean_w)-max(tmp_plot_data$share_soybean_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$share_soybean_mean_w)+max(tmp_plot_data$share_soybean_sd_w))*1.25)+
  # theme
  labs(y="Part de l'apport en tourteau de soja", x="Labels des produits issus du lait dont les fromages",
       title = "Part de l'apport en tourteau de soja sur la matière sèche totale ingérée par le bétail (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()


```

#### Herd size


```{r herd_size}

# transfert table
tmp_TT_livestock <- read_xlsx("data_in/transfert_table_livestock.xlsx",
                              sheet ="transfert_table")

# RICA data
tmp_RICA_2020_anim <- read_delim(
  "//casd.fr/casdfs/Projets/EVAPDRH/Data/RICA_RICA_2020/RICA2020_tables_CSV/ani20.csv",
  delim = ";", escape_double = FALSE, trim_ws = TRUE,
  col_types = cols(IDENT = col_character())) %>%
  # add species and units
  left_join(.,tmp_TT_livestock %>% select(CODE6,EFFEC6_unit)) %>%
  # summaries populations
  group_by(IDENT,CODE6) %>%
  summarise(EFFEC = sum(EFFEC6*EFFEC6_unit)) %>% ungroup() %>%
  filter(
    # remove livestock without population
    EFFEC >0 # 4179 farms
    )

tmp_plot_data <- tmp_farms_milk %>%
  left_join(.,tmp_RICA_2020_anim %>%
              # select dairy cows
              filter(CODE6 == 929)) %>%
  # summarize
  group_by(FQS,app_fromage) %>% 
  summarise(
    # export rules
    n=n(),
    max_percent_herd=max(EFFEC)/sum(EFFEC),
    n_w= sum(EXTR2),
    max_percent_herd_w=max(EFFEC*EXTR2)/sum(EFFEC*EXTR2),
    # herd
    EFFEC_mean = mean(EFFEC, na.rm = T),
    EFFEC_sd = sd(EFFEC, na.rm = T),
    EFFEC_se = sd(EFFEC, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    EFFEC_mean_w = sum(EFFEC * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    EFFEC_sd_w = sqrt(sum(EXTR2 * ((EFFEC - EFFEC_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    EFFEC_se_w = 
      sqrt(
        ( ( (sum(EXTR2*EFFEC^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (EFFEC_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
    ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10)

# plot herd size ----

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = app_fromage, y = EFFEC_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = app_fromage, y = EFFEC_mean_w,
                    ymin = EFFEC_mean_w - EFFEC_se_w*1.96, ymax = EFFEC_mean_w + EFFEC_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = app_fromage, y = EFFEC_mean_w,
                    ymin = EFFEC_mean_w - EFFEC_sd_w, ymax = EFFEC_mean_w + EFFEC_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = app_fromage,
        y=(max(tmp_plot_data$EFFEC_mean_w)+ max(tmp_plot_data$EFFEC_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$EFFEC_mean_w)-
                  max(tmp_plot_data$EFFEC_sd_w)) < 0 ~
                 (min(tmp_plot_data$EFFEC_mean_w)-max(tmp_plot_data$EFFEC_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$EFFEC_mean_w)+max(tmp_plot_data$EFFEC_sd_w))*1.25)+
  # theme
  labs(y="Taille du troupeau de vache laitière", x="Labels et Fromages",
       title = "Nombre de vache laitière par ferme (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()


```

#### Production per area

- L of milk ha-1: estimated from the pseudo-farm area and production
- kg of meat ha-1

```{r l_milk_per_ha}

# estimate L of milk produced by hectares for feed
tmp_prod_per_ha <- tmp_farms_milk %>%
  # add total area for feed
  left_join(.,feed_by_pseudofarm %>%
              # total area in hectares for feed
              group_by(IDENT) %>%
              summarise(total_area_for_feed = sum(area_for_feed))) %>% # 1331 farms
  # calculate l of milk produced by ha
  mutate(
    l_milk_per_ha = prod / total_area_for_feed
  )

# plot data ----

tmp_plot_data <- tmp_prod_per_ha %>%
  # summarize
  group_by(FQS,app_fromage) %>% 
  summarise(
    # export rules
    n=n(),
    max_percent=max(l_milk_per_ha)/sum(l_milk_per_ha),
    n_w= sum(EXTR2),
    max_percent_w=max(l_milk_per_ha*EXTR2)/sum(l_milk_per_ha*EXTR2),
    # herd
    l_milk_per_ha_mean = mean(l_milk_per_ha, na.rm = T),
    l_milk_per_ha_sd = sd(l_milk_per_ha, na.rm = T),
    l_milk_per_ha_se = sd(l_milk_per_ha, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    l_milk_per_ha_mean_w = sum(l_milk_per_ha * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    l_milk_per_ha_sd_w = sqrt(sum(EXTR2 * ((l_milk_per_ha - l_milk_per_ha_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    l_milk_per_ha_se_w = 
      sqrt(
        ( ( (sum(EXTR2*l_milk_per_ha^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (l_milk_per_ha_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
    ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10)

# plot ----

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = app_fromage, y = l_milk_per_ha_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = app_fromage, y = l_milk_per_ha_mean_w,
                    ymin = l_milk_per_ha_mean_w - l_milk_per_ha_se_w*1.96, ymax = l_milk_per_ha_mean_w + l_milk_per_ha_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = app_fromage, y = l_milk_per_ha_mean_w,
                    ymin = l_milk_per_ha_mean_w - l_milk_per_ha_sd_w, ymax = l_milk_per_ha_mean_w + l_milk_per_ha_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = app_fromage,
        y=(max(tmp_plot_data$l_milk_per_ha_mean_w)+ max(tmp_plot_data$l_milk_per_ha_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$l_milk_per_ha_mean_w)-
                  max(tmp_plot_data$l_milk_per_ha_sd_w)) < 0 ~
                 (min(tmp_plot_data$l_milk_per_ha_mean_w)-max(tmp_plot_data$l_milk_per_ha_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$l_milk_per_ha_mean_w)+max(tmp_plot_data$l_milk_per_ha_sd_w))*1.25)+
  # theme
  labs(y="Quantité de lait produite par hectare (L ha-1)", x="Labels et Fromages",
       title = "Rendement de lait par hectare de terre utilisée pour l'alimentation du bétail (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()


```

#### Production per animal

- L of milk / animal
- for meat ??? voir poids moyens par stade de dev dans GIEC

```{r l_milk_per_animal}

# herd size
# transfert table
tmp_TT_livestock <- read_xlsx("data_in/transfert_table_livestock.xlsx",
                              sheet ="transfert_table")

# RICA data
tmp_RICA_2020_anim <- read_delim(
  "//casd.fr/casdfs/Projets/EVAPDRH/Data/RICA_RICA_2020/RICA2020_tables_CSV/ani20.csv",
  delim = ";", escape_double = FALSE, trim_ws = TRUE,
  col_types = cols(IDENT = col_character())) %>%
  # add species and units
  left_join(.,tmp_TT_livestock %>% select(CODE6,EFFEC6_unit)) %>%
  # summaries populations
  group_by(IDENT,CODE6) %>%
  summarise(EFFEC = sum(EFFEC6*EFFEC6_unit)) %>% ungroup() %>%
  filter(
    # remove livestock without population
    EFFEC >0 # 4179 farms
    )

# estimate L of milk produced by animal
tmp_prod_per_anim <- tmp_farms_milk %>%
  # add herd size
  left_join(.,tmp_RICA_2020_anim %>%
              # select dairy cows
              filter(CODE6 == 929)) %>% # 1331 farms
  # calculate l of milk produced by ha
  mutate(
    l_milk_per_anim = prod / EFFEC
  )

# plot data ----

tmp_plot_data <- tmp_prod_per_anim %>%
  # summarize
  group_by(FQS,app_fromage) %>% 
  summarise(
    # export rules
    n=n(),
    max_percent=max(l_milk_per_anim)/sum(l_milk_per_anim),
    n_w= sum(EXTR2),
    max_percent_w=max(l_milk_per_anim*EXTR2)/sum(l_milk_per_anim*EXTR2),
    # herd
    l_milk_per_anim_mean = mean(l_milk_per_anim, na.rm = T),
    l_milk_per_anim_sd = sd(l_milk_per_anim, na.rm = T),
    l_milk_per_anim_se = sd(l_milk_per_anim, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    l_milk_per_anim_mean_w = sum(l_milk_per_anim * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    l_milk_per_anim_sd_w = sqrt(sum(EXTR2 * ((l_milk_per_anim - l_milk_per_anim_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    l_milk_per_anim_se_w = 
      sqrt(
        ( ( (sum(EXTR2*l_milk_per_anim^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (l_milk_per_anim_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
    ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10)

# plot ----

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = app_fromage, y = l_milk_per_anim_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = app_fromage, y = l_milk_per_anim_mean_w,
                    ymin = l_milk_per_anim_mean_w - l_milk_per_anim_se_w*1.96, ymax = l_milk_per_anim_mean_w + l_milk_per_anim_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = app_fromage, y = l_milk_per_anim_mean_w,
                    ymin = l_milk_per_anim_mean_w - l_milk_per_anim_sd_w, ymax = l_milk_per_anim_mean_w + l_milk_per_anim_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = app_fromage,
        y=(max(tmp_plot_data$l_milk_per_anim_mean_w)+ max(tmp_plot_data$l_milk_per_anim_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$l_milk_per_anim_mean_w)-
                  max(tmp_plot_data$l_milk_per_anim_sd_w)) < 0 ~
                 (min(tmp_plot_data$l_milk_per_anim_mean_w)-max(tmp_plot_data$l_milk_per_anim_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$l_milk_per_anim_mean_w)+max(tmp_plot_data$l_milk_per_anim_sd_w))*1.25)+
  # theme
  labs(y="Quantité de lait produite par hectare (L ha-1)", x="Labels et Fromages",
       title = "Rendement de lait par hectare de terre utilisée pour l'alimentation du bétail (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()


```

## Biodiversity impact

### Crops

```{r plot_point_errorbar_cereals}

##### wrangle data for plot ----
## I need the mean, sd and CI
tmp_plot_data <- BVI_to_RICA_RA_SIQO_crops %>%
  filter(
    # remove AB partiel
    !is.na(FQS)
    # remove SIQO with wine
    & !grepl(c(" VINS|EAUXDEVIE"),SIQO_FILIERE)
    # remove farms with NAs
    & is.finite(BVI_ha+yield+BVI_kg)
    ) %>%
  # add RICA variables 
  left_join(., RICA_2020 %>% select(IDENT,EXTR2)) %>%
  # summarise BVI
  group_by(CODE3,FQS) %>%
  summarise(
    # export rules
    n=n(),
    max_percent_ha=max(BVI_ha)/sum(BVI_ha),
    max_percent_kg=max(BVI_kg)/sum(BVI_kg),
    n_w= sum(EXTR2),
    max_percent_ha_w=max(BVI_ha*EXTR2)/sum(BVI_ha*EXTR2),
    max_percent_kg_w=max(BVI_kg*EXTR2)/sum(BVI_kg*EXTR2),
    # hectares
    BVI_ha_mean = mean(BVI_ha, na.rm = T),
    BVI_ha_sd = sd(BVI_ha, na.rm = T),
    BVI_ha_se = sd(BVI_ha, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    BVI_ha_mean_w = sum(BVI_ha * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    BVI_ha_sd_w = sqrt(sum(EXTR2 * ((BVI_ha - BVI_ha_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    BVI_ha_se_w = 
      sqrt(
        ( ( (sum(EXTR2*BVI_ha^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (BVI_ha_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      ),
    # kilo
    BVI_kg_mean = mean(BVI_kg,na.rm = T),
    BVI_kg_sd = sd(BVI_kg,na.rm = T),
    BVI_kg_se = sd(BVI_kg, na.rm = T)/sqrt(n),
    
    BVI_kg_mean_w = sum(BVI_kg * EXTR2,na.rm = T) / sum(EXTR2,na.rm = T),
    BVI_kg_sd_w = sqrt(sum(EXTR2 * ((BVI_kg - BVI_kg_mean_w)^2),na.rm = T)/
                               (sum(EXTR2,na.rm = T)-1)),
    BVI_kg_se_w = 
      sqrt(
        ( ( (sum(EXTR2*BVI_kg^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (BVI_kg_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
  ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10) %>%
  # filter by OTEX
  #filter(OTEFDD == 1500) %>%
  # select some crops
  filter(
    ## cereals
    CODE3 %in% c(111,112,113,114,115,116,117,118,119,120,121,122,123)
    # CODE3 %in% c(111,115,118)
         )

## extract crop name
### transfert table
tmp_TT_crops <- read_xlsx("data_in/transfert_table_crop.xlsx",sheet = "transfert_table")
tmp_crop_name = tmp_TT_crops %>%
  select(CODE3,LIBELLE) %>%
  filter(CODE3 %in% tmp_plot_data$CODE3)

##### plot BVI / ha ----
tmp_plot_data %>%
  # remove NAs: if sd = NA, means that there's no variance so we remove it
  filter(!is.na(BVI_ha_sd_w)) %>%
  ggplot(.)+
    geom_point(aes(x = as.character(CODE3), y = BVI_ha_mean_w,colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = as.character(CODE3), y = BVI_ha_mean_w,
                    ymin = BVI_ha_mean_w - BVI_ha_se_w*1.96, ymax = BVI_ha_mean_w + BVI_ha_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = as.character(CODE3), y = BVI_ha_mean_w,
                    ymin = BVI_ha_mean_w - BVI_ha_sd_w, ymax = BVI_ha_mean_w + BVI_ha_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # crop name
  geom_text(data = tmp_crop_name,
            aes(x=as.character(CODE3),
                y=(max(tmp_plot_data$BVI_ha_mean_w)+ max(tmp_plot_data$BVI_ha_sd_w))*1.2,
                label=LIBELLE),
            size=5,hjust=0
            )+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = as.character(CODE3),
        y=(max(tmp_plot_data$BVI_ha_mean_w)+ max(tmp_plot_data$BVI_ha_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$BVI_ha_mean_w)-
                  max(tmp_plot_data$BVI_ha_sd_w)) < 0 ~
                 (min(tmp_plot_data$BVI_ha_mean_w)-max(tmp_plot_data$BVI_ha_sd_w))*1.5,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$BVI_ha_mean_w)+max(tmp_plot_data$BVI_ha_sd_w))*1.5)+
  # theme
  labs(y="BVI / ha", x="Cultures",
       title = "Le BVI des céréales par hectare et par type de pratiques (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","darkgrey","indianred","goldenrod3"),
    labels=c("AB","AB (en conversion)","Conventionnel","Label Rouge","IGP"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()


##### plot BVI / kg ----
tmp_plot_data %>%
  # remove NAs: if sd = NA, means that there's no variance so we remove it
  filter(is.finite(BVI_kg_sd_w)) %>%
  ggplot(.)+
    geom_point(aes(x = as.character(CODE3), y = BVI_kg_mean_w,colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = as.character(CODE3), y = BVI_kg_mean_w,
                    ymin = BVI_kg_mean_w - BVI_kg_se_w*1.96, ymax = BVI_kg_mean_w + BVI_kg_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = as.character(CODE3), y = BVI_kg_mean_w,
                    ymin = BVI_kg_mean_w - BVI_kg_sd_w, ymax = BVI_kg_mean_w + BVI_kg_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # crop name
  geom_text(data = tmp_crop_name,
            aes(x=as.character(CODE3),
                y=(max(tmp_plot_data$BVI_kg_mean_w)+ max(tmp_plot_data$BVI_kg_sd_w))*1.2,
                label=LIBELLE),
            size=5,hjust=0
            )+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = as.character(CODE3),
        y=(max(tmp_plot_data$BVI_kg_mean_w)+ max(tmp_plot_data$BVI_kg_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$BVI_kg_mean_w) - max(tmp_plot_data$BVI_kg_sd_w)) < 0 ~
                 (min(tmp_plot_data$BVI_kg_mean_w)-max(tmp_plot_data$BVI_kg_sd_w))*1.5,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$BVI_kg_mean_w)+max(tmp_plot_data$BVI_kg_sd_w))*1.5)+
  # theme
  labs(y="BVI / kg", x="Cultures",
       title = "Le BVI des céréales par kilo et par type de pratiques (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","darkgrey","indianred","goldenrod3"),
    labels=c("AB","AB (en conversion)","Conventionnel","Label Rouge","IGP"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()


```

### Milk

```{r plot_BVI_ha}

tmp_plot_data <- tmp_farms_milk %>%
  # summarize
  group_by(FQS,app_fromage) %>% 
  summarise(
    # export rules
    n=n(),
    max_percent=max(BVI_ha_feed)/sum(BVI_ha_feed),
    n_w= sum(EXTR2),
    max_percent_w=max(BVI_ha_feed*EXTR2)/sum(BVI_ha_feed*EXTR2),
    # herd
    BVI_ha_feed_mean = mean(BVI_ha_feed, na.rm = T),
    BVI_ha_feed_sd = sd(BVI_ha_feed, na.rm = T),
    BVI_ha_feed_se = sd(BVI_ha_feed, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    BVI_ha_feed_mean_w = sum(BVI_ha_feed * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    BVI_ha_feed_sd_w = sqrt(sum(EXTR2 * ((BVI_ha_feed - BVI_ha_feed_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    BVI_ha_feed_se_w = 
      sqrt(
        ( ( (sum(EXTR2*BVI_ha_feed^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (BVI_ha_feed_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
    ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10)

# plot ----

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = app_fromage, y = BVI_ha_feed_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = app_fromage, y = BVI_ha_feed_mean_w,
                    ymin = BVI_ha_feed_mean_w - BVI_ha_feed_se_w*1.96, ymax = BVI_ha_feed_mean_w + BVI_ha_feed_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = app_fromage, y = BVI_ha_feed_mean_w,
                    ymin = BVI_ha_feed_mean_w - BVI_ha_feed_sd_w, ymax = BVI_ha_feed_mean_w + BVI_ha_feed_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = app_fromage,
        y=(max(tmp_plot_data$BVI_ha_feed_mean_w)+ max(tmp_plot_data$BVI_ha_feed_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$BVI_ha_feed_mean_w)-
                  max(tmp_plot_data$BVI_ha_feed_sd_w)) < 0 ~
                 (min(tmp_plot_data$BVI_ha_feed_mean_w)-max(tmp_plot_data$BVI_ha_feed_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$BVI_ha_feed_mean_w)+max(tmp_plot_data$BVI_ha_feed_sd_w))*1.25)+
  # theme
  labs(y="BVI / ha", x="Cultures",
       title = "Le BVI par hectare nécessaire à l'alimentation du troupeau (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()



```

```{r plot_BVI_kg_milk}

tmp_plot_data <- tmp_farms_milk %>%
  # summarize
  group_by(FQS,app_fromage) %>% 
  summarise(
    # export rules
    n=n(),
    max_percent=max(BVI_kg)/sum(BVI_kg),
    n_w= sum(EXTR2),
    max_percent_w=max(BVI_kg*EXTR2)/sum(BVI_kg*EXTR2),
    # herd
    BVI_kg_mean = mean(BVI_kg, na.rm = T),
    BVI_kg_sd = sd(BVI_kg, na.rm = T),
    BVI_kg_se = sd(BVI_kg, na.rm = T)/sqrt(n),
    
    #n_eff = sum(EXTR2)^2 / sum(EXTR2^2),
    BVI_kg_mean_w = sum(BVI_kg * EXTR2, na.rm = T) / sum(EXTR2, na.rm = T),
    BVI_kg_sd_w = sqrt(sum(EXTR2 * ((BVI_kg - BVI_kg_mean_w)^2), na.rm = T)/
                            (sum(EXTR2, na.rm = T)-1)),
    BVI_kg_se_w = 
      sqrt(
        ( ( (sum(EXTR2*BVI_kg^2,na.rm = T)) / (sum(EXTR2,na.rm = T)) ) -  (BVI_kg_mean_w^2) )
        *
          ( (sum(EXTR2^2,na.rm = T)) / ( (sum(EXTR2,na.rm = T)^2) - (sum(EXTR2^2,na.rm = T)) ) )
      )
    ) %>% ungroup() %>%
  # filter FQS with less then 10 farms
  filter(n >= 10)

# plot ----

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = app_fromage, y = BVI_kg_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = app_fromage, y = BVI_kg_mean_w,
                    ymin = BVI_kg_mean_w - BVI_kg_se_w*1.96, ymax = BVI_kg_mean_w + BVI_kg_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = app_fromage, y = BVI_kg_mean_w,
                    ymin = BVI_kg_mean_w - BVI_kg_sd_w, ymax = BVI_kg_mean_w + BVI_kg_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = app_fromage,
        y=(max(tmp_plot_data$BVI_kg_mean_w)+ max(tmp_plot_data$BVI_kg_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$BVI_kg_mean_w)-
                  max(tmp_plot_data$BVI_kg_sd_w)) < 0 ~
                 (min(tmp_plot_data$BVI_kg_mean_w)-max(tmp_plot_data$BVI_kg_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$BVI_kg_mean_w)+max(tmp_plot_data$BVI_kg_sd_w))*1.25)+
  # theme
  labs(y="BVI / kg", x="Cultures",
       title = "Le BVI par litre de lait produit (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()

```


```{r plot_BVI_kg}

# plot BVI / kg

tmp_plot_data %>%
  ggplot(.)+
    geom_point(aes(x = LIBELLE_PRODUIT, y = BVI_kg_mean_w,
                   colour = as.character(FQS)),
             size=5,position = position_dodge(width = 0.5))+
  # CI 95
  geom_errorbar(aes(x = LIBELLE_PRODUIT, y = BVI_kg_mean_w,
                    ymin = BVI_kg_mean_w - BVI_kg_se_w*1.96, ymax = BVI_kg_mean_w + BVI_kg_se_w*1.96,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=1,linetype = 1,
                position = position_dodge(width = 0.5))+
  # SD
  geom_errorbar(aes(x = LIBELLE_PRODUIT, y = BVI_kg_mean_w,
                    ymin = BVI_kg_mean_w - BVI_kg_sd_w, ymax = BVI_kg_mean_w + BVI_kg_sd_w,
                    colour = as.character(FQS)),
                width = 0.5,linewidth=0.5,linetype = 2,
                position = position_dodge(width = 0.5))+
  # n
  geom_text(
    data = tmp_plot_data,
    aes(x = LIBELLE_PRODUIT,
        y=(max(tmp_plot_data$BVI_kg_mean_w)+ max(tmp_plot_data$BVI_kg_sd_w))*1.1,
        colour = as.character(FQS),
        label = paste0("n = ",n)),
    size=4,position = position_dodge(width = 0.5)
  )+
  # limits
  ylim(
    # y lim min
    case_when( (min(tmp_plot_data$BVI_kg_mean_w)-
                  max(tmp_plot_data$BVI_kg_sd_w)) < 0 ~
                 (min(tmp_plot_data$BVI_kg_mean_w)-max(tmp_plot_data$BVI_kg_sd_w))*1.25,
               .default = 0),
  # y lim max
  (max(tmp_plot_data$BVI_kg_mean_w)+max(tmp_plot_data$BVI_kg_sd_w))*1.25)+
  # theme
  labs(y="BVI / kg", x="Cultures",
       title = "Le BVI des troupeaux par type de pratiques (moyenne, interval de confiance et erreur standard pondérées)",
       colour = "Label")+
  scale_color_manual(
    values = c("palegreen3","darkcyan","plum4","darkgrey","goldenrod3","indianred"),
    labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","IGP","Label Rouge"))+
  coord_flip() +
  scale_fill_discrete()+
  theme_minimal()

```

