---
title: "BiodivLabel Analysis Script"
author: "Sarah Huet"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
knitr: 
  opts_chunk: 
    collapse: true
    comment: "#>"
    R.options:
      knitr.graphics.auto_pdf: true
---


# Set up

We used the RICA 2020 data.

```{r packages}

library(readr)
library(readxl)

library(tidyr)
library(dplyr)
library(tibble)
library(stringr)

library(ggplot2)

library(modelsummary)

rm(list = ls())
#rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
tmp_output_folder = paste0(getwd(),"/data_out")

```

# Data

```{r load_model_data}

tmp_resp_var_w0_match <- read_csv("CASD_export/tmp_resp_var_w0_match.csv")

tmp_resp_var_w_match <- read_csv("CASD_export/tmp_resp_var_w_match.csv")

tmp_TukeyHSD <- read_csv("CASD_export/tmp_TukeyHSD.csv")
tmp_paired_ttest <- read_csv("CASD_export/tmp_paired_ttest.csv")

tmp_paired_ttest_adjust <- tmp_paired_ttest %>%
  mutate(padjust_bonf = p.adjust(pval_pttest,method = "bonferroni"),
         padjust_fdr = p.adjust(pval_pttest,method = "fdr"))
write.csv(tmp_paired_ttest_adjust,"CASD_export/tmp_paired_ttest_adjust.csv",
          row.names = F,quote = F)

```

# Plots

## BVI

```{r BVIAS_ha}

# plot data ----

tmp_plot_data <- tmp_resp_var_w0_match %>%
  mutate(match = "no_match") %>%
  rbind(.,tmp_resp_var_w_match %>%
          # select only counterfactuals
          filter(FQS == "Conventionnel")) %>%
  # change matched counterfactual FQS for plot
  mutate(
    plot_x = case_when(
      production_type == "crop" ~ paste0(product_name,match,FQS),
      production_type == "milk" ~ paste0(match,product_name)),
    # select my var
    my_var = BVI_ha) %>%
  # pivot wider
  pivot_wider(.,id_cols = c(plot_x,production_type,product_name,FQS,match,n),names_from = statistique,values_from = my_var) %>%
  # select only some products
  filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
         & match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
                        "NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier"))

# plot stat ----

tmp_plot_stat_TukeyHSD <- tmp_TukeyHSD %>%
  mutate(match = "no_match") %>%
  # select practice
  filter(practice == "BVI_ha") %>%
  # change matched counterfactual FQS for plot
  mutate(
    plot_x = case_when(
      production_type == "crop" ~ paste0(product_name,match,FQS),
      production_type == "milk" ~ paste0(match,product_name)))

tmp_plot_stat_pttest <- tmp_paired_ttest %>%
  # select practice
  filter(practice == "BVI_ha") %>%
  # remove conterfactuals
  filter(label != "Conventionnel") %>%
  # add match
  mutate(match = case_when(
    product_RICA_CODE != "milk" ~ paste0(product_name,"__",label),
    product_RICA_CODE == "milk" ~ paste0("NA__",label)
  )) %>%
  # add asterisk when signif
  mutate(stat_grp = case_when(
    pval_pttest <= 0.05 ~ "*",.default = ""
  )) %>%
  # change as matched counterfactual FQS for plot
  mutate(
    product_name = case_when(
      product_RICA_CODE == "milk" ~ "Conventionnel",
      product_RICA_CODE != "milk" ~ product_name),
    FQS = "Conventionnel",
    plot_x = case_when(
      product_RICA_CODE != "milk" ~ paste0(product_name,match,"Conventionnel"),
      product_RICA_CODE == "milk" ~ paste0(match,"Conventionnel"))) 

tmp_plot_stat <- rbind(
  tmp_plot_stat_TukeyHSD %>% select(plot_x,product_name,FQS,match,stat_grp),
  tmp_plot_stat_pttest %>% select(plot_x,product_name,FQS,match,stat_grp)) %>%
  # select only some products
  filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
         & match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
                        "NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier"))

tmp_plot_data <- left_join(tmp_plot_data,tmp_plot_stat)

# plot colors ----
tmp_colors <- tibble(
  FQS = c("AB","AB (en conversion)","AOP - AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP;LR","LR",
          "Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"),
  values = c("palegreen3","darkcyan","plum4","darkgrey","#333333","indianred4","goldenrod3","goldenrod3","indianred",
             "plum4","plum4","goldenrod3","plum4","plum4"),
  labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP","Label Rouge",
           "Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"))
names(tmp_colors$values) <- tmp_colors$FQS 
names(tmp_colors$labels) <- tmp_colors$FQS

tmp_plot_data <- tmp_plot_data %>%
  mutate(plot_color = case_when(
    match != "no_match" & FQS == "Conventionnel" ~ "Contrefactuel",
    .default = FQS
  ))

# plot order ----

tmp_plot_order <- tibble(
  plot_x = rev(c("Ble tendreno_matchConventionnel",
                 "Ble tendreno_matchAB",
                 "Ble tendreBle tendre__ABConventionnel",
                 "Ble tendreno_matchLR",
                 "Ble tendreBle tendre__LRConventionnel",
                 "Mais grainno_matchConventionnel",
                 "Mais grainno_matchAB",
                 "Mais grainMais grain__ABConventionnel",
                 "no_matchConventionnel",
                 "no_matchAB",
                 "NA__ABConventionnel",
                 "no_matchBeurre de Charentes-Poitou",
                 "NA__Beurre de Charentes-PoitouConventionnel",
                 "no_matchComte - Morbier",
                 "NA__Comte - MorbierConventionnel")),
  labels = rev(c("Blé tendre - Conventionnel",
                 "Blé tendre - AB",
                 "Blé tendre - Contrefactuel AB",
                 "Blé tendre - LR",
                 "Blé tendre - Contrefactuel LR",
                 "Maïs grain - Conventionnel",
                 "Maïs grain - AB",
                 "Maïs grain - Contrefactuel AB",
                 "Lait - Conventionnel",
                 "Lait - AB",
                 "Lait - Contrefactuel AB",
                 "Lait - Beurre de Charentes-Poitou",
                 "Lait - Contrefactuel Beurre de Charentes-Poitou",
                 "Lait - Comte - Morbier",
                 "Lait - Contrefactuel Comte - Morbier")))

tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
                               levels = tmp_plot_order$plot_x,
                               labels = tmp_plot_order$labels)

# plot ----

ggplot() +
  # mean
  geom_point(data = tmp_plot_data,
             aes(x = plot_x, y = mean, fill = plot_color,colour = plot_color),
             shape = 21, size=2, stroke = 1, position = position_dodge(width = 0.75)) +
  # CI95%
  geom_errorbar(data = tmp_plot_data,
             aes(x = plot_x, ymin = mean-1.96*(sd/sqrt(n)), ymax = mean+1.96*(sd/sqrt(n)), colour = plot_color),
             linewidth=1,width = 0.5,position = position_dodge(width = 0.75)) +
  # sd
  geom_errorbar(data = tmp_plot_data,
             aes(x = plot_x, ymin = mean-sd, ymax = mean+sd, colour = plot_color),
             linewidth=0.5,width = 0.5,linetype = "dashed",position = position_dodge(width = 0.75)) +
  # n
  geom_text(data = tmp_plot_data,
            aes(x = plot_x, y=max(mean+sd)*1.1,colour = plot_color,label = paste0("n = ",as.character(n))),
            size=3,position = position_dodge(width = 1)) +
  # stat groups
  geom_text(data = tmp_plot_data,
            aes(x = plot_x,y=0,colour = plot_color,label = stat_grp),
            size=3,position = position_dodge(width = 1))+
  # theme
  coord_flip() +
  ylim(c(0,max(tmp_plot_data$mean+tmp_plot_data$sd)*1.2)) +
  facet_wrap(vars(production_type),scales = "free_y",ncol = 1) +
  labs(y = "BVIAS_ha",x= "Produits") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_light() +
  theme(legend.position = c(0,0),
        legend.direction = "horizontal",legend.title = element_blank())

ggsave("tmp_plot_BVIAS_ha.svg",
       plot = last_plot(),units = "mm",width = 170, height = 112)


```


```{r BVIAS_kg}

# plot data ----

tmp_plot_data <- tmp_resp_var_w0_match %>%
  mutate(match = "no_match") %>%
  rbind(.,tmp_resp_var_w_match %>%
          # select only counterfactuals
          filter(FQS == "Conventionnel")) %>%
  # change matched counterfactual FQS for plot
  mutate(
    plot_x = case_when(
      production_type == "crop" ~ paste0(product_name,match,FQS),
      production_type == "milk" ~ paste0(match,product_name)),
    # select my var
    my_var = BVI_kg*10^3) %>%
  # pivot wider
  pivot_wider(.,id_cols = c(plot_x,production_type,product_name,FQS,match,n),names_from = statistique,values_from = my_var) %>%
  # select only some products
  filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
         & match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
                        "NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier"))

# plot stat ----

tmp_plot_stat_TukeyHSD <- tmp_TukeyHSD %>%
  mutate(match = "no_match") %>%
  # select practice
  filter(practice == "BVI_kg") %>%
  # change matched counterfactual FQS for plot
  mutate(
    plot_x = case_when(
      production_type == "crop" ~ paste0(product_name,match,FQS),
      production_type == "milk" ~ paste0(match,product_name)))

tmp_plot_stat_pttest <- tmp_paired_ttest %>%
  # select practice
  filter(practice == "BVI_kg") %>%
  # remove conterfactuals
  filter(label != "Conventionnel") %>%
  # add match
  mutate(match = case_when(
    product_RICA_CODE != "milk" ~ paste0(product_name,"__",label),
    product_RICA_CODE == "milk" ~ paste0("NA__",label)
  )) %>%
  # add asterisk when signif
  mutate(stat_grp = case_when(
    pval_pttest <= 0.05 ~ "*",.default = ""
  )) %>%
  # change as matched counterfactual FQS for plot
  mutate(
    product_name = case_when(
      product_RICA_CODE == "milk" ~ "Conventionnel",
      product_RICA_CODE != "milk" ~ product_name),
    FQS = "Conventionnel",
    plot_x = case_when(
      product_RICA_CODE != "milk" ~ paste0(product_name,match,"Conventionnel"),
      product_RICA_CODE == "milk" ~ paste0(match,"Conventionnel"))) 

tmp_plot_stat <- rbind(
  tmp_plot_stat_TukeyHSD %>% select(plot_x,product_name,FQS,match,stat_grp),
  tmp_plot_stat_pttest %>% select(plot_x,product_name,FQS,match,stat_grp)) %>%
  # select only some products
  filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
         & match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
                        "NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier"))

tmp_plot_data <- left_join(tmp_plot_data,tmp_plot_stat)

# practice labels ----

tmp_plot_data$production_type <- factor(tmp_plot_data$production_type,
                               levels = rev(unique(tmp_plot_data$production_type)),
                               labels = rev(c("Productions laitières","Productions céréalières")))


# plot colors ----
tmp_colors <- tibble(
  FQS = c("AB","AB (en conversion)","AOP - AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP;LR","LR",
          "Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"),
  values = c("palegreen3","darkcyan","plum4","darkgrey","#333333","indianred4","goldenrod3","goldenrod3","indianred",
             "plum4","plum4","goldenrod3","plum4","plum4"),
  labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP","Label Rouge",
           "Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"))
names(tmp_colors$values) <- tmp_colors$FQS 
names(tmp_colors$labels) <- tmp_colors$FQS

tmp_plot_data <- tmp_plot_data %>%
  mutate(plot_color = case_when(
    match != "no_match" & FQS == "Conventionnel" ~ "Contrefactuel",
    .default = FQS
  ))

# plot order ----

tmp_plot_order <- tibble(
  plot_x = rev(c("Ble tendreno_matchConventionnel",
                 "Ble tendreno_matchAB",
                 "Ble tendreBle tendre__ABConventionnel",
                 "Ble tendreno_matchLR",
                 "Ble tendreBle tendre__LRConventionnel",
                 "Mais grainno_matchConventionnel",
                 "Mais grainno_matchAB",
                 "Mais grainMais grain__ABConventionnel",
                 "no_matchConventionnel",
                 "no_matchAB",
                 "NA__ABConventionnel",
                 "no_matchBeurre de Charentes-Poitou",
                 "NA__Beurre de Charentes-PoitouConventionnel",
                 "no_matchComte - Morbier",
                 "NA__Comte - MorbierConventionnel")),
  labels = rev(c("Blé tendre - Conventionnel",
                 "Blé tendre - AB",
                 "Blé tendre - Contrefactuel AB",
                 "Blé tendre - LR",
                 "Blé tendre - Contrefactuel LR",
                 "Maïs grain - Conventionnel",
                 "Maïs grain - AB",
                 "Maïs grain - Contrefactuel AB",
                 "Lait - Conventionnel",
                 "Lait - AB",
                 "Lait - Contrefactuel AB",
                 "Lait - Beurre de Charentes-Poitou",
                 "Lait - Contrefactuel Beurre de Charentes-Poitou",
                 "Lait - Comte - Morbier",
                 "Lait - Contrefactuel Comte - Morbier")))

tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
                               levels = tmp_plot_order$plot_x,
                               labels = tmp_plot_order$labels)

# plot ----

ggplot() +
  # mean
  geom_point(data = tmp_plot_data,
             aes(x = plot_x, y = mean, fill = plot_color,colour = plot_color),
             shape = 21, size=2, stroke = 1, position = position_dodge(width = 0.75)) +
  # CI95%
  geom_errorbar(data = tmp_plot_data,
             aes(x = plot_x, ymin = mean-1.96*(sd/sqrt(n)), ymax = mean+1.96*(sd/sqrt(n)), colour = plot_color),
             linewidth=1,width = 0.5,position = position_dodge(width = 0.75)) +
  # sd
  geom_errorbar(data = tmp_plot_data,
             aes(x = plot_x, ymin = mean-sd, ymax = mean+sd, colour = plot_color),
             linewidth=0.5,width = 0.5,linetype = "dashed",position = position_dodge(width = 0.75)) +
  # n
  geom_text(data = tmp_plot_data,
            aes(x = plot_x, y=max(mean+sd)*1.1,colour = plot_color,label = paste0("n = ",as.character(n))),
            size=3,position = position_dodge(width = 1)) +
  # stat groups
  geom_text(data = tmp_plot_data,
            aes(x = plot_x,y=min(mean-sd)*1.02,colour = plot_color,label = stat_grp),
            size=3,position = position_dodge(width = 1))+
  # theme
  coord_flip() +
  ylim(c(min(tmp_plot_data$mean-tmp_plot_data$sd)*1.03,max(tmp_plot_data$mean+tmp_plot_data$sd)*1.2)) +
  facet_wrap(vars(production_type),scales = "free_y",ncol = 1) +
  labs(y = "BVIAS_t",x= "Produits") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_light() +
  theme(legend.position = c(0,0),
        legend.direction = "horizontal",legend.title = element_blank())

ggsave("tmp_plot_BVIAS_kg.svg",
       plot = last_plot(),units = "mm",width = 170, height = 112)


```


## Practices

```{r practice_names}

# crops

tmp_practice_names_crops <- tibble(
  practice = rev(c("A.3.1_max",
               "A.4.5_max",
               "A.4.5_min_max",
               "A.4.5_org_max",
               "A.5.1_max",
               "yield")),
  labels = rev(c("Travail du sol (L gazole / ha)",
             "Fertilisation (kg N / ha)", 
             "Fertilisation (minérale)", 
             "Fertilisation (organique)",
             "Produits phytosanitaires (€*/ ha)",
             "Rendement (kg / ha)")))

# herd

tmp_practice_names_herd <- tibble(
  practice = c("yield_l_pha",
               "yield_l_panim",
               "nb_cow_pha",
               "cow_pMFA",
               "feed_autonomy",
               "kg_DM_panim_maize_produced",
               #"kg_DM_panim_soy_meal",
               "share_soybean",
               #"share_concent_purchased",
               "share_concent",
               "MFA_pcow",
               "MFA_pha_pseudofarm",
               "ha_temp_pasture_pha_pseudofarm",
               "grassland_share_pseudofarm"#,
               #"grassland_share_farm"
               ),
  labels = c("Rendement (L lait / ha pseudoferme)",
             "Rendement (L lait / vache laitière)",
             "Taux de chargement (vache laitière / ha pseudoferme)",
             "Taux de chargement (vache laitière / ha SFP)",
             "Autonomie alimentaire (kg d'aliment produits / kg d'aliments)",
             "Maïs fourrage (kg de maïs fourrage produit sur l'exploitation / vache laitière)",
             #"Tourteau de soja (kg de tourteau de soja acheté / vache laitière)",
             "Part du tourteau de soja importé (kg tourteau de soja / kg d'aliments)",
             #"Part des concentrés dans les aliments achetés (kg de concentrés / kg d'aliments achetés)",
             "Part des concentrés dans l'alimentation (kg de concentrés / kg d'aliments)",
             "Surface Fourragère Principale (SFP / vache laitière)",
             "Part de la Surface Fourragère Principale (ha SFP / ha pseudoferme)",
             "Part des prairies temporaires (ha prairie / ha pseudoferme)",
             "Part des prairies permanentes (ha prairie / ha pseudoferme)"#,
             #"Part des prairies permanentes (ha prairie / ha ferme)"
             ))

# feed

tmp_practice_names_feed <- tibble(
  practice = rev(c("feed_A.3.1_max",
               "feed_A.4.5_max",
               "feed_A.4.5_min_max",
               "feed_A.4.5_org_max",
               "feed_A.5.1_max",
               "feed_yield")),
  labels = rev(c("Travail du sol (L gazole / ha)",
             "Fertilisation (kg N / ha)", 
             "Fertilisation (minérale)", 
             "Fertilisation (organique)",
             "Produits phytosanitaires (€* / ha)",
             "Rendement (kg / ha)")))

# all
tmp_practice_names <- Reduce(rbind,list(
  tmp_practice_names_crops,
  tmp_practice_names_herd,
  tmp_practice_names_feed
))

```

```{r practices_unmatched_Tukey_HSD}

# plot data ----

tmp_plot_data <- tmp_TukeyHSD %>%
  # choose displayed value
  #mutate(plot_y = `loop2$my_var` - conv_mean) %>%
  mutate(plot_y =`loop2$my_var`) %>%
  # add asterisk when signif
  mutate(stat_grp = case_when(
    pval <= 0.05 ~ "*",.default = ""
  )) %>%
  # select only some products
  filter(product_name %in% c("Ble tendre","Maïs grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")) %>%
  # facet practices
  mutate(practice_subset = case_when(
    practice %in% tmp_practice_names_crops$practice ~ "practice_crops",
    practice %in% tmp_practice_names_herd$practice ~ "practice_herd",
    practice %in% tmp_practice_names_feed$practice ~ "practice_feed",
    .default = "BVI"
  ))

# add y limit max
tmp_plot_data <- tmp_plot_data %>%
  left_join(.,
            tmp_plot_data %>% group_by(practice) %>% summarise(y_lim_max = max(plot_y+se*1.96)) %>% ungroup(),
            by = join_by(practice))


# plot colors ----
tmp_colors <- tibble(
  FQS = c("AB","AB (en conversion)","AOP - AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP;LR","LR",
          "Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"),
  values = c("palegreen3","darkcyan","plum4","darkgrey","#333333","indianred4","goldenrod3","goldenrod3","indianred",
             "plum4","plum4","goldenrod3","plum4","darkcyan"),
  labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP","Label Rouge",
           "Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"))
names(tmp_colors$values) <- tmp_colors$FQS 
names(tmp_colors$labels) <- tmp_colors$FQS

# practice labels ----

tmp_plot_data$practice <- factor(tmp_plot_data$practice,
                               levels = tmp_practice_names$practice,
                               labels = tmp_practice_names$labels)

# crops ----

tmp_plot_data %>%
  filter(practice_subset == "practice_crops" &
           production_type != "milk") %>%
ggplot(.) +
  # value
  geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
  # error bar
  geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+se*1.96, colour = FQS),position = "dodge") +
    # stat groups
  geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
            size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
  # theme
  coord_flip() +
  facet_wrap(vars(practice,product_name), scales = "free", ncol = 2L) +
  #geom_blank(data = tmp_facet_scale,aes( y = scale))+
  labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_minimal() +
  theme(legend.position ="bottom",
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank())

# herd ----

tmp_plot_data %>%
 filter(practice_subset %in% "practice_herd") %>%
 filter(production_type %in% "milk") %>%
 ggplot(.) +
  # value
  geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
  # error bar
  geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+se*1.96, colour = FQS),position = "dodge") +
    # stat groups
  geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
            size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
  # theme
  coord_flip() +
  facet_wrap(vars(practice), scales = "free", ncol = 1L) +
  #geom_blank(data = tmp_facet_scale,aes( y = scale))+
  labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_minimal() +
  theme(legend.position ="bottom",
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_blank(),
        strip.text.x = element_blank())



```



```{r practices_matched_paired_t_test}


# plot data ----

tmp_plot_data <- tmp_paired_ttest %>%
  mutate(padjust = p.adjust(pval_pttest,method = "bonferroni")) %>%
  # set FQS and conterfactuals
  mutate(FQS = case_when(
    label == "Conventionnel" & match %in% match[grep("AB",match)] ~ "Contrefactuel_AB",
    label == "Conventionnel" & match %in% match[grep("LR",match)] ~ "Contrefactuel_LR",
    label == "Conventionnel" & match %in% match[grep("Comte - Morbier",match)] ~"Contrefactuel_Comte - Morbier",
    label == "Conventionnel" & match %in% match[grep("Beurre de Charentes-Poitou",match)] ~"Contrefactuel_Beurre de Charentes-Poitou",
    .default = label
  )) %>%
  # choose displayed value
  #mutate(plot_y = mean_diff_match) %>%
  mutate(plot_y = mean) %>%
  # add asterisk when signif
  mutate(stat_grp = case_when(
    padjust <= 0.05 ~ "*",.default = ""
  )) %>%
  # select only some products
  filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
         & match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
                        "NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier")) %>%
  # facet practices
  mutate(practice_subset = case_when(
    practice %in% tmp_practice_names_crops$practice ~ "practice_crops",
    practice %in% tmp_practice_names_herd$practice ~ "practice_herd",
    practice %in% tmp_practice_names_feed$practice ~ "practice_feed",
    .default = "BVI"
  ))


# add y limit max
tmp_plot_data <- tmp_plot_data %>%
  left_join(.,
            tmp_plot_data %>% group_by(practice) %>% summarise(y_lim_max = max(plot_y+sd)) %>% ungroup(),
            by = join_by(practice))


# plot colors ----
tmp_colors <- tibble(
  FQS = c("AB","Contrefactuel_AB","LR","Contrefactuel_LR",
          "Comte - Morbier","Contrefactuel_Comte - Morbier","Beurre de Charentes-Poitou","Contrefactuel_Beurre de Charentes-Poitou"),
  values = c("palegreen3","darkgrey","indianred","#333333",
             "plum4","#cccccc","darkcyan","#333333"),
  labels=c("AB","Contrefactuel AB","LR","Contrefactuel LR",
          "Comte - Morbier","Contrefactuel Comte - Morbier","Beurre de Charentes-Poitou","Contrefactuel Beurre de Charentes-Poitou"))
names(tmp_colors$values) <- tmp_colors$FQS 
names(tmp_colors$labels) <- tmp_colors$FQS

# practice labels ----

tmp_plot_data$practice <- factor(tmp_plot_data$practice,
                               levels = tmp_practice_names$practice,
                               labels = tmp_practice_names$labels)

# crops ----

tmp_plot_data %>%
  filter(practice_subset == "practice_crops" &
           match %in% c("Ble tendre__AB","Ble tendre__LR","Mais grain__AB")) %>%
ggplot(.) +
  # value
  geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
  # error bar
  geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+sd, colour = FQS),position = "dodge") +
    # stat groups
  geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
            size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
  # theme
  coord_flip() +
  facet_wrap(vars(practice,match), scales = "free", ncol = 3L) +
  #geom_blank(data = tmp_facet_scale,aes( y = scale))+
  labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_minimal() +
  theme(legend.position ="bottom",
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_blank(),
        strip.text = element_blank())

ggsave("tmp_plot_practices_paired_t_test_herd.svg",
       plot = last_plot(),units = "mm",width = 170, height = 112*2)




# herd ----

tmp_plot_data %>%
  filter(practice_subset == "practice_herd" &
           product_RICA_CODE == "milk") %>%
   ggplot(.) +
  # value
  geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
  # error bar
  geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+sd, colour = FQS),position = "dodge") +
    # stat groups
  geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
            size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
  # theme
  coord_flip() +
  facet_wrap(vars(practice), scales = "free", ncol = 1L) +
  #geom_blank(data = tmp_facet_scale,aes( y = scale))+
  labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_minimal() +
  theme(legend.position ="bottom",
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_blank(),
        strip.text.x = element_blank())


  # filter practices for visualization purposes
#  filter(practice %in% c())
ggplot(.) +
  # practice
  geom_col(aes(x = plot_x, y = mean_diff_match, fill = FQS)) +
  # stat groups
  geom_text(aes(x = plot_x,y=0,colour = "black",label = stat_grp,fontface = "bold"),
            size=12,position = position_dodge(width = 0.9)) +
  # theme
  facet_grid(rows = vars(practice), scales = "free_y",
             labeller = label_wrap_gen(multi_line = TRUE)) +
  geom_blank(data = tmp_facet_scale,aes( y = scale))+
  labs(y = "Moyenne des différences avec les contrefactuels",x= "Produits") +
  scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
  scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
  theme_minimal() +
  theme(legend.position ="bottom",
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.text.y.right = element_text(angle = 0))

ggsave("tmp_plot_practices_paired_t_test_herd.svg",
       plot = last_plot(),units = "mm",width = 170, height = 225)



```

# Tables

```{r 24-05-24}

# arrange table

tmp_tableS1 <- tmp_TukeyHSD %>%
  select(production_type,product_name,FQS,practice,`loop2$my_var`) %>% 
  pivot_wider(names_from = practice,values_from = `loop2$my_var`) %>%
  mutate(Statistique = "Moyenne",
         order = case_when(FQS == "Conventionnel" ~1, .default = 3)) %>%
  # sd
  rbind(
    tmp_TukeyHSD %>%
      select(production_type,product_name,FQS,practice,std) %>%
      pivot_wider(names_from = practice,values_from = std) %>%
      mutate(Statistique = "Ecart-type",
         order = case_when(FQS == "Conventionnel" ~2, .default = 4))  ) %>%
  # "Différence sans matching"
  rbind(
    tmp_TukeyHSD %>%
      mutate(diff_sans_match = `loop2$my_var` - conv_mean) %>%
      select(production_type,product_name,FQS,practice,diff_sans_match) %>%
      pivot_wider(names_from = practice,values_from = diff_sans_match) %>%
      filter(FQS != "Conventionnel") %>%
      mutate(Statistique = "Différence sans matching",
             order = 5)  ) %>%
  # "Tukey HSD p-value"
  rbind(
    tmp_TukeyHSD %>%
      select(production_type,product_name,FQS,practice,pval) %>%
      pivot_wider(names_from = practice,values_from = pval) %>%
      filter(FQS != "Conventionnel") %>%
      mutate(Statistique = "Tukey HSD p-value",
             order = 6)) %>%
  # ***
  rbind(
    tmp_TukeyHSD %>%
      mutate(Significance = case_when(pval <= 0.001 ~ "***",
                                      pval <= 0.01 ~ "**",
                                      pval <= 0.05 ~ "*",
                                      .default = "")) %>%
      select(production_type,product_name,FQS,practice,Significance) %>%
      pivot_wider(names_from = practice,values_from = Significance) %>%
      filter(FQS != "Conventionnel") %>%
      mutate(Statistique = "Significance",
             order = 7)) %>%
  # "Différence post matching"
  rbind(
    tmp_paired_ttest_adjust %>%
      mutate(production_type = case_when(
        product_RICA_CODE != "milk" ~ "crop", .default = "milk")) %>%
      rename(FQS = label) %>%
      filter(FQS != "Conventionnel") %>%
      select(production_type,product_name,FQS,practice,mean_diff_match) %>%
      pivot_wider(names_from = practice,values_from = mean_diff_match) %>%
      mutate(Statistique = "Différence post matching",
             order = 8)) %>%
  # "T-test apparié, FDR p-value"
  rbind(
    tmp_paired_ttest_adjust %>%
      mutate(production_type = case_when(
        product_RICA_CODE != "milk" ~ "crop", .default = "milk")) %>%
      rename(FQS = label) %>%
      filter(FQS != "Conventionnel") %>%
      select(production_type,product_name,FQS,practice,padjust_fdr) %>%
      pivot_wider(names_from = practice,values_from = padjust_fdr) %>%
      mutate(Statistique = "T-test apparié FDR p-value",
             order = 9)) %>%
  # ***
  rbind(
    tmp_paired_ttest_adjust %>%
      mutate(production_type = case_when(
        product_RICA_CODE != "milk" ~ "crop", .default = "milk")) %>%
      rename(FQS = label) %>%
      filter(FQS != "Conventionnel") %>%
      mutate(Significance = case_when(padjust_fdr <= 0.001 ~ "***",
                                      padjust_fdr <= 0.01 ~ "**",
                                      padjust_fdr <= 0.05 ~ "*",
                                      .default = "")) %>%
      select(production_type,product_name,FQS,practice,Significance) %>%
      pivot_wider(names_from = practice,values_from = Significance) %>%
      mutate(Statistique = "Significance",
             order = 10)) %>%
  # add order for LR
  mutate(order = case_when(
    FQS == "LR" ~order *10,.default = order  ))

# extract crops
tmp_table <- tmp_tableS1 %>%
  filter(production_type == "crop") %>%
  select(production_type,order,product_name,FQS,Statistique,
         BVI_ha,BVI_kg,yield,A.3.1_max,A.4.5_max,A.4.5_min_max,A.4.5_org_max,A.5.1_max)
write.csv(tmp_table,paste0(tmp_output_folder,"/tmp_tableS1a.csv"),
          row.names = F,quote = F)

# extract feed
tmp_table <- tmp_tableS1 %>%
  filter(production_type == "milk") %>%
  select(production_type,order,product_name,FQS,Statistique,
         BVI_ha,BVI_kg,feed_yield,feed_A.3.1_max,feed_A.4.5_max,feed_A.4.5_min_max,feed_A.4.5_org_max,feed_A.5.1_max)
write.csv(tmp_table,paste0(tmp_output_folder,"/tmp_tableS1b.csv"),
          row.names = F,quote = F)

# extract herd
tmp_table <- tmp_tableS1 %>%
  filter(production_type == "milk") %>%
  select(production_type,order,product_name,FQS,Statistique,
         feed_autonomy,grassland_share_pseudofarm,ha_temp_pasture_pha_pseudofarm,MFA_pha_pseudofarm,cow_pMFA,nb_cow_pha,
         kg_DM_panim_maize_produced,share_concent,share_soybean,yield_l_panim,yield_l_pha)
write.csv(tmp_table,paste0(tmp_output_folder,"/tmp_tableS1c.csv"),
          row.names = F,quote = F)


```

```{r model_Summary}

library(modelsummary)




```

