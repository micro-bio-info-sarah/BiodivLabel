rename(farm_id = ID) %>%
mutate(CONSOPEST = IPROT_V) %>%
# select variables
select(farm_id,org_farming,crop,area_ha,CONSOPEST)
}
# Calculate reference average ----
# source EPK 2017 (kg ha-1) and others (see raw file)
tmp_ift_ref <- read_excel("data_in/supp_data.xlsx",sheet = "IFT_ref") %>%
# we will use ift.hbcref = average TFI without biological control agents
# pk prendre ift hors bc si on ne peut pas déterminer la part de bc dans x_i ???
mutate(TFI = as.numeric(ifttref))
# assign averages by crop codes (60 different crops)
tmp_TFI <- tmp_TT_crops %>%
# select crop code and name
filter(crop %in% unique(tmp_input$crop)) %>%
# add average TFI
# add average ration
rowwise() %>%
mutate(
TFI = mean(tmp_ift_ref$TFI[
tmp_ift_ref$lib_ift %in% unlist(strsplit(TFI_crop_name,";"))
],na.rm = T)
)
## if no crops is similar enough, we used the global average ???
for (tmp_i in which(is.na(tmp_TFI$TFI))) {
tmp_TFI$TFI[tmp_i] <- mean(tmp_ift_ref$TFI,
na.rm = T)
}
##### Join data ----
tmp_data <- tmp_input %>%
# add TFI
left_join(.,tmp_TFI) %>%
## if no crops is similar enough, we used the global average ???
replace_na(list(TFI = mean(tmp_ift_ref$TFI,
na.rm = T)))
table(tmp_data$land_use_type)
# here we choose a proxy of "Soil movement" metric as the total GNR consumption (in liter) minus the mean consumption without tillage per hectare divided by the UAA in crop production
# I distribute the metric value as: total to arable, zero to pasture
# I calculate the mean GNR used without tillage per hectare as the mean value of GNR used for direct seeding in wheat, maize and the wheat-maize rotation (Pellerin, 2013)
tmp_mean_GNR = mean(c(60,48,54))
if (my_DB == "RICA") {
# transfert table
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops") %>%
rename(crop = RICA_code_number)
tmp_input <- RICA_2020_veg %>%
# summaries areas
group_by(IDENT,CODE3)%>%
summarise(
area_ha = sum(SUPER3*10^-2,na.rm = T)
) %>%
# add off-road diesel consumption
left_join(., RICA_2020 %>% select(IDENT,CHRCAQG)) # 7266 farms
}
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops") %>%
rename(crop = FADN_code_letter)
tmp_input <- FADN_18 %>%
# area in hectares for each crop
# off-road diesel consumption
## IFULS_V	H_LM_1040_V	Motor fuels and lubricants Value	in EUR
select(ID,IFULS_V, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = !c(ID,IFULS_V),names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop)) %>%
rename(farm_id = ID,fuels_value = IFULS_V) %>%
# select variables
select(farm_id,crop,area_ha,fuels_value)
}
# filters
tmp_tillage <- tmp_input %>%
filter(
# keep only arable land use type
crop %in% tmp_TT_crops$crop[tmp_TT_crops$land_use_type == "arable"], # 7108 farms
# keep only crops with areas
area_ha > 0, # 6869 farms
# remove farms without any consumption of off-road diesel as it seems improbable
fuels_value >0 # 6264 farms
) %>%
# calculate areas by farm
left_join(.,
tmp_input %>% group_by(farm_id) %>% summarise(SAU_i_ha = sum(area_ha))) %>%
# estimate parameter
mutate(
# x_i
x_i = fuels_value / SAU_i_ha,
# calculate A.3.1
A.3.1 = case_when(
# for farms that consume less off-road diesel than the no-till average, we considered that they practice no-till
## 277 farms with l_per_ha < tmp_mean_GNR
x_i < tmp_mean_GNR ~ 0,
# for farms that have arable land area lower than 1 hectare, we consider that they do not till
## 505 farms with SAU_i (arable) < 1
#SAU_c_ha < 1 ~ 0,
# for other farms, we apply the following formula
.default = x_i - tmp_mean_GNR
))
# filters
tmp_tillage <- tmp_input %>%
filter(
# keep only arable land use type
crop %in% tmp_TT_crops$crop[tmp_TT_crops$land_use_type == "arable"], # 7108 farms
# keep only crops with areas
area_ha > 0, # 6869 farms
# remove farms without any consumption of off-road diesel as it seems improbable
fuels_value >0 # 6264 farms
) %>%
# calculate areas by farm
group_by(farm_id) %>%
mutate(SAU_i_ha = sum(area_ha)) %>%
# estimate parameter
mutate(
# x_i
x_i = fuels_value / SAU_i_ha,
# calculate A.3.1
A.3.1 = case_when(
# for farms that consume less off-road diesel than the no-till average, we considered that they practice no-till
## 277 farms with l_per_ha < tmp_mean_GNR
x_i < tmp_mean_GNR ~ 0,
# for farms that have arable land area lower than 1 hectare, we consider that they do not till
## 505 farms with SAU_i (arable) < 1
#SAU_c_ha < 1 ~ 0,
# for other farms, we apply the following formula
.default = x_i - tmp_mean_GNR
))
quantile(tmp_tillage$A.3.1,c(0.1,0.25,0.5,0.75,0.9))
tmp_mean_GNR
tmp = tmp_input %>%
filter(
# keep only arable land use type
crop %in% tmp_TT_crops$crop[tmp_TT_crops$land_use_type == "grassland"], # 7108 farms
# keep only crops with areas
area_ha > 0, # 6869 farms
# remove farms without any consumption of off-road diesel as it seems improbable
fuels_value >0 # 6264 farms
)
table(tmp_input$fuels_value >0)
table(tmp_input$area_ha >0)
length(unique(tmp$farm_id))
length(unique(tmp$farm_id[tmp$farm_id %in% tmp_tillage$farm_id]))
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
# WIP est-ce la bonne manière de joindre les df pour ne pas garder les fermes qu'on a retiré à chaque paramètre ???
tmp_farms <- Reduce(intersect,list(BV_A.3.1$farm_id,
BV_A.4.5$farm_id,
BV_A.5.1$farm_id))
# transfert table
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
colnames(tmp_FADN_crops)
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops %>% rename(crop = FADN_code_letter) %>% select(crop,land_use_type)
)
View(tmp_TT_crops)
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops %>% rename(crop = FADN_code_letter) %>% select(crop)
)
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name)
) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
)
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name)
) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
)
View(tmp_TT_crops)
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name)
)
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
))
View(tmp_TT_crops)
source("scripts/BVI_A31.R",local = knitr::knit_global())
source("scripts/BVI_A45.R",local = knitr::knit_global())
table(is.na(BV_A.4.5$A.4.5))
table(unique(round(BV_A.4.5$A.4.5)))
quantile(na.omit(BV_A.4.5$A.4.5))
source("scripts/BVI_A51.R",local = knitr::knit_global())
# WIP est-ce la bonne manière de joindre les df pour ne pas garder les fermes qu'on a retiré à chaque paramètre ???
tmp_farms <- Reduce(intersect,list(BV_A.3.1$farm_id,
BV_A.4.5$farm_id,
BV_A.5.1$farm_id))
length(unique(BV_A.3.1$farm_id))
source("d:/users/srhuet/documents/FADN2Footprint/scripts/BVI_A31.R", echo=TRUE)
length(unique(BV_A.3.1$farm_id))
quantile(BV_A.4.5)
quantile(BV_A.3.1$A.3.1)
source("d:/users/srhuet/documents/FADN2Footprint/scripts/BVI_A51.R")
# WIP est-ce la bonne manière de joindre les df pour ne pas garder les fermes qu'on a retiré à chaque paramètre ???
tmp_farms <- Reduce(intersect,list(BV_A.3.1$farm_id,
BV_A.4.5$farm_id,
BV_A.5.1$farm_id))
60221 / 81288
6091/7355
length(unique(BV_A.3.1))
length(unique(BV_A.3.1$farm_id))
source("d:/users/srhuet/documents/FADN2Footprint/scripts/BVI_A31.R")
length(unique(BV_A.3.1$farm_id))
length(unique(BV_A.4.5$farm_id))
source("d:/users/srhuet/documents/FADN2Footprint/scripts/BVI_A45.R")
length(unique(BV_A.4.5$farm_id))
length(unique(BV_A.5.1$farm_id))
source("d:/users/srhuet/documents/FADN2Footprint/scripts/BVI_A51.R")
length(unique(BV_A.5.1$farm_id))
# WIP est-ce la bonne manière de joindre les df pour ne pas garder les fermes qu'on a retiré à chaque paramètre ???
tmp_farms <- Reduce(intersect,list(BV_A.3.1$farm_id,
BV_A.4.5$farm_id,
BV_A.5.1$farm_id))
library(dplyr)
if (my_DB == "RICA") {
# transfert table
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops") %>%
rename(crop = RICA_code_number)
}
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
)
}
View(tmp_TT_crops)
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
) %>% distinct()
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
)
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
) %>% distinct()
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
))
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>%
group_by(crop,land_use_type) %>%
summarise(
TFI_crop_name = paste0(unique(na.omit(unlist(strsplit(TFI_crop_name,";")))),collapse = ";")
))
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
) %>% distinct()
}
# WIP est-ce la bonne manière de joindre les df pour ne pas garder les fermes qu'on a retiré à chaque paramètre ???
tmp_farms <- Reduce(intersect,list(BV_A.3.1$farm_id,
BV_A.4.5$farm_id,
BV_A.5.1$farm_id))
# transfert table
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_param <- Reduce(full_join,list(
BV_A.3.1 %>% filter(farm_id %in% tmp_farms),
BV_A.4.5 %>% filter(farm_id %in% tmp_farms),
BV_A.5.1 %>% filter(farm_id %in% tmp_farms)
)) %>% ungroup()
# import constant from Lindner 2019 SM
tmp_BV_constant <-  read_excel("data_in/supp_data.xlsx",
sheet = "Lindner_2019_BV_LU_function_con",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
# select crops
tmp_BV_contrib <- tmp_param
# import constant from Lindner 2019 SM
tmp_BV_constant <-  read_excel("data_in/supp_data.xlsx",
sheet = "Lindner_2019_BV_LU_function_con",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
# select crops
tmp_BV_contrib <- tmp_param
# loop to normalize all parameters and apply BV functions
for (tmp_i in c("A.3.1","A.4.5","A.4.5_min","A.4.5_org","A.5.1")) { #tmp_i = c("A.3.1","A.4.5","A.5.1")[1]
# define the maximum of each parameter to 95% of the positive values (i.e., cut off the 5% highest positive values)
## ??? pour labour, valeurs dupliquées => modifie quantiles => valeurs unique => change quantiles pour autre
#tmp_max = pull(tmp_param,tmp_i)
#tmp_max = quantile(tmp_max[which(tmp_max>0)],0.95)
tmp_max = unique(pull(tmp_param,tmp_i))
tmp_max = quantile(tmp_max,0.95,na.rm = T)
print(paste0(tmp_i," 95th quantile: ",tmp_max))
# retrieve constant from Lindner 2019
tmp_constant <- tmp_BV_constant[tmp_BV_constant$metric_number == str_sub(tmp_i,start = 1,end = 5),]
# function
tmp_df <- tmp_param %>%
## select param
select(farm_id,crop,all_of(tmp_i)) %>%
setNames(c("farm_id","crop","x")) %>%
mutate(
## set max
x_max =
case_when(
x > tmp_max ~ tmp_max,
.default =  x ),
## Normalize data
x_norm =
case_when(
x > tmp_max ~ 1,
.default =  x / tmp_max ),
## calculate BV
y = case_when(
x_norm == 0 ~ 1,
x_norm == 1 ~ 0,
.default = tmp_constant$gamma + tmp_constant$epsilon * exp(-(
abs(((x_norm^tmp_constant$delta) - tmp_constant$beta) ^ tmp_constant$alpha) /
(2*tmp_constant$sigma^tmp_constant$alpha))) ),
## constrain BV !!! lots of negative values obtained for A.4.5_y (when A.4.5_x_norm > 0.82)
## Lindner 2022: diff gamma => when x_norm = 1 => y = -2 => constrain if x_norm = 1 => y =0
y = case_when(
y <0 ~ 0,
y >1 ~ 1,
.default = y
)
)
#plot
hist(tmp_df$x_max,nclass = 1000)
abline(v=tmp_max)
plot(tmp_df$x_max,tmp_df$y,
main=tmp_constant$Metric)
tmp_df <- tmp_df %>%
setNames(c("farm_id","crop",tmp_i,paste0(tmp_i,"_max"),paste0(tmp_i,"_norm"),paste0(tmp_i,"_y")))
# retrieve loop results
tmp_BV_contrib <- tmp_BV_contrib %>%
left_join(.,tmp_df)
}
tmp_BV_LU <- tmp_BV_contrib %>%
rowwise() %>%
mutate(
# average
BV_LU = mean(c(A.3.1_y,A.4.5_y,A.5.1_y),na.rm=T)
)
# Normalize BV_LU
tmp_BV_norm <- tmp_BV_LU %>%
# add land use type
left_join(.,tmp_TT_crops %>% select(crop,land_use_type)) %>%
mutate(
# set BV_norm min and max according to Lindner et al. (2019)
BV_norm_min = case_when(
land_use_type == "forest" ~ 1/3,
land_use_type == "grassland" ~ 1/3,
land_use_type == "arable" ~ 1/6,
land_use_type == "mining" ~ 0),
BV_norm_max = case_when(
land_use_type == "forest" ~ 1,
land_use_type == "grassland" ~ 5/6,
land_use_type == "arable" ~ 2/3,
land_use_type == "mining" ~ 1/3),
# Normalize BV_LU
BV_norm = BV_norm_min+BV_LU*(BV_norm_max-BV_norm_min)
)
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
) %>% distinct()
# Normalize BV_LU
tmp_BV_norm <- tmp_BV_LU %>%
# add land use type
left_join(.,tmp_TT_crops %>% select(crop,land_use_type)) %>%
mutate(
# set BV_norm min and max according to Lindner et al. (2019)
BV_norm_min = case_when(
land_use_type == "forest" ~ 1/3,
land_use_type == "grassland" ~ 1/3,
land_use_type == "arable" ~ 1/6,
land_use_type == "mining" ~ 0),
BV_norm_max = case_when(
land_use_type == "forest" ~ 1,
land_use_type == "grassland" ~ 5/6,
land_use_type == "arable" ~ 2/3,
land_use_type == "mining" ~ 1/3),
# Normalize BV_LU
BV_norm = BV_norm_min+BV_LU*(BV_norm_max-BV_norm_min)
)
tmp_BV_loc <- tmp_BV_norm %>%
mutate(BV_loc = 1.017626088*(1-exp(-4.055847776*BV_norm)),
BVI_ha = 1- BV_loc
)
source("~/BiodivLabel/scripts/yield_crop.R")
source("/scripts/yield_crop.R")
source("scripts/yield_crop.R")
source("scripts/yield_crop.R")
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop)
) %>% distinct()
tmp_input <- FADN_18 %>%
# area in hectares for each crop
# Value of crop protection products
## IPROT_V	H_SC_3040_V	Crop protection products Value	in EUR
select(ID, NUTS3,all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop)) %>%
rename(farm_id = ID,farm_region = NUTS3) %>%
# select variables and obs
select(farm_id,crop,area_ha) %>%
filter(
# keep only crops with areas
area_ha > 0 #  farms
)
}
source("scripts/yield_crop.R")
source("scripts/yield_crop.R")
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,SAA_Agreste_2020)
) %>% distinct()
source("scripts/yield_crop.R")
source("scripts/yield_crop.R")
tmp_input <- FADN_18 %>%
# area in hectares for each crop
# Value of crop protection products
## IPROT_V	H_SC_3040_V	Crop protection products Value	in EUR
select(ID, NUTS3,all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop)) %>%
## production quantity in kg for each crop
left_join(.,FADN_18 %>%
select(ID, NUTS3, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_PRQ"),colnames(FADN_18)))) %>%
pivot_longer(cols = !c(ID,NUTS3),names_to = "crop",values_to = "prod_t") %>%
mutate(crop = gsub("_PRQ","",crop)))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
# Value of crop protection products
## IPROT_V	H_SC_3040_V	Crop protection products Value	in EUR
select(ID, NUTS3,all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop)) %>%
## production quantity in kg for each crop
left_join(.,FADN_18 %>%
select(ID, NUTS3, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_PRQ"),colnames(FADN_18)))) %>%
pivot_longer(cols = !c(ID,NUTS3),names_to = "crop",values_to = "prod_t") %>%
mutate(crop = gsub("_PRQ","",crop))) %>%
# select variables and obs
rename(farm_id = ID,farm_region = NUTS3) %>%
select(farm_id,farm_region,crop,area_ha) %>%
filter(
# keep only crops with areas
area_ha > 0 #  farms
)
source("scripts/yield_crop.R")
source("scripts/yield_crop.R")
source("scripts/yield_crop.R")
BVI_to_RICA_crops <- tmp_BV_loc %>%
# add yields
left_join(., tmp_yield) %>% # 5952 farms
mutate(
BVI_kg = BVI_ha / yield
) %>% ungroup()
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
length(unique(BVI_to_RICA_crops$farm_id))
load("d:/users/srhuet/documents/FADN2Footprint/.RData")
