---
title: "FADN Analysis Script"
author: "Sarah Huet"
date: 2024/05/29
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
---

# Import data

We used the RICA 2020 data.

```{r packages}

library(readr)
library(readxl)

library(tidyr)
library(dplyr)
library(tibble)

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
#rm(list = ls())

# which data base are you using? either "FADN" or "RICA"
my_DB = "RICA"

```

```{r load_data}

if (my_DB == "RICA") {
  
  
  #RICA_2020 <- read_delim("~/BiodivLabel/data_CASD/RICA_RICA_2020/RICA2020_tables_CSV/rica20.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE, col_types = cols(IDENT = col_character(), SIRET = col_character()))
  
  #RICA_2020_veg <- read_delim("~/BiodivLabel/data_CASD/RICA_RICA_2020/RICA2020_tables_CSV/veg20.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE, col_types = cols(IDENT = col_character()))
  
  #RICA_2020_ani <- read_delim("~/BiodivLabel/data_CASD/RICA_RICA_2020/RICA2020_tables_CSV/ani20.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE,col_types = cols(IDENT = col_character(),CODE6 = col_number()))
  
  #RICA_2020_pan <- read_delim("~/BiodivLabel/data_CASD/RICA_RICA_2020/RICA2020_tables_CSV/pan20.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE,col_types = cols(IDENT = col_character(),CODE7 = col_number()))
  
  load("~/BiodivLabel/data_CASD/RICA_2020.RData")
  
  #PACAGE_landscape_metrics <- read_csv("data_in/PACAGE_landscape_metrics.csv")
  
  
}


if (my_DB == "FADN") {
  
  # Get the files names
  #tmp_ls_files = paste0(getwd(),"/FADN_LIFT_2004-2018/raw_data/",list.files(path = paste0(getwd(),"/FADN_LIFT_2004-2018/raw_data/"),pattern = "*.csv"))
  # First apply read.csv, then rbind
  #FADN_04_18 = lapply(tmp_ls_files, read_csv) %>% bind_rows()
  
  # Get the files names
  #tmp_ls_files = paste0(getwd(),"/FADN_LIFT_2004-2018/raw_data/",list.files(path = paste0(getwd(),"/FADN_LIFT_2004-2018/raw_data/"),pattern = "*2018.csv"))
  # First apply read.csv, then rbind
  #FADN_18 = lapply(tmp_ls_files, read_csv) %>% bind_rows() %>% mutate(ID = as.character(ID))
  
  load("~/BiodivLabel/data_in/FADN_2018.RData")
  
}


```

# Livestock

To estimate the impact of livestock on biodiversity, we first need to estimates the impact of their feed intake. Specifically, for purchased feed, we need to estimate the practices that were implemented in the farms that produced it. For that purpose, we will:
1. Estimate how much of each feed type have been purchased based on an average livestock ration
2. Estimate the ration nutritional value
2. Estimate the average practices implemented to produce each type of feed

## Estimer la ration (quantité et qualité des aliments)

### Calculer la quantité ingérée d'aliments par ferme

```{r feed_purchased}

source("~/BiodivLabel/R/feed_purchased.R",local = knitr::knit_global()) # concentrate + rough

```

```{r feed_produced}

# As input, a table with:
## farm Unique Identifier
## farm region
## crop code
## area in hectares for each crop
## production quantity in kg for each crop
## sales quantity in kg for each crop
source("~/BiodivLabel/R/yield_crop.R")

source("~/BiodivLabel/R/feed_produced.R",local = knitr::knit_global()) # crops + grassland


```


### Répartir la quantité ingérée d'aliments par type de bétail

As feeding practices differ between livestock categories, we considered that the proportion of feed supplied for a livestock category $l$ on the total value of feed in the farm $i$ is equal to the proportion of the average ration for that livestock category $l$ on the sum of the average ration of all farm herd, such as:

$$\frac{x_{i,l}}{x_i} = \frac{ration_l \cdot pop_{i,l}}{ \sum_{l} (ration_l \cdot pop_{i,l}) }$$

Thus, we estimated the amount of feed supplied to each livestock category $l$ as follow:

$$x_{i,l} = x_i \cdot \frac{ ration_l \cdot pop_{i,l}}{ \sum_{l} \big(ration_l \cdot pop_{i,l} \big) }$$

where:

$x$: the amount of feed provided (kg)
$ration$: the average ration as determined by AROPAJ (ref ???)
$pop$: number of animals
$i$: a farm
$l$: a livestock category

```{r feed_by_livestock_category}

source("~/BiodivLabel/R/feed_by_livestock_category.R",local = knitr::knit_global())

```

## Estimer la quantité d'azote excrété par le bétail

```{r N_excretion}

# NB : guidelines IPCC are for one animal, not for one livestock unit

source("~/BiodivLabel/R/N_excretion_from_livestock.R",local = knitr::knit_global())

### output => kg N yr-1 

```

# Crops

## Intensity of soil movement

We estimated the intensity of soil movement by comparing the off-road diesel volume used to the average consumption on non-tillage farms, as established by Pellerin et al. (2013).

$$Y_{i} = \frac{x_{i}}{SAU_{i}} - \overline{x}$$

Where:

$i$: a farm $Y$: the volume of off-road diesel used for tillage per hectare (L/ha) $x$: the volume of off-road diesel used (L) $SAU$: the useful arable area (ha) $\overline{x}$: the average off-road diesel use without tillage (L ha-1) as determined by Pellerin et al. (2015)

We chose an area allocation on arable land use type.

```{r A.3.1}

source("~/BiodivLabel/R/in_practice_A31.R",local = knitr::knit_global())

```

## Intensity of Fertilizing

As mineral fertilization practices differ between crops, land use type and farm certification, we considered that the proportion of mineral fertilizer used for the crop $c$ on the total value of mineral fertilizer input in the farm $i$ is equal to the proportion of the average mineral fertilizer input for that crop $c$ on the sum of average mineral fertilizer inputs of all farm crops, such as:

$$\frac{x_{i,c}}{x_i} = \frac{ M_{c} \cdot SAU_{i,c} }{ \sum_{i} (M_{c} \cdot SAU_{i,c} ) }$$

Thus, we estimated the value of mineral fertilizer input used per hectares as follow:

$$ Y_{i,c}^{min} = \frac{x_i \cdot \frac{ M_c \cdot SAU_{i,c}}{ \sum_{c} \big(M_c \cdot SAU_{i,c} \big) }}{SAU_{i,c}} $$

where: $Y^{min}$: the quantity of mineral fertilizer input per hectares (kg N/ha) $x$: the quantity of mineral fertilizer input (kg) $M$: the average mineral fertilizer input as determined by the EPK studies (2017) 
$SAU$: the useful arable area (ha) $i$: a farm $c$: a crop or grassland

with $M_{c} = 0$ for certified organic crops

For organic fertilization, we considered that farms without livestock apply a reference  average of organic fertilizer across both their croplands and grasslands, as determined by the EPK studies (2017). In the case of farms with livestock, we calculated the total nitrogen excretion from their livestock following the IPCC Guidelines. We then estimated the quantity of this organic nitrogen applied to cropland and grassland $Y^{org}$ as for $Y^{min}$.

```{r A.4.5}

source("~/BiodivLabel/R/in_practice_A45.R",local = knitr::knit_global())

```

[1] "4237 farms have no or not enough livestock. They receive the average national value as a standard value (see Methods). Among them, 309 are organic farms."
[1] "3511 farms have too much livestock. They receive the maximum organic N threshold as a standard value (see Methods). Among them, 213 are organic farms."
[1] "2918 farms have enough and not too much livestock. They spread the total N excreted from their livestock on-farm (see Methods). Among them, 169 are organic farms."

## Share of artifical fertilizer

```{r A.4.3}

source("~/BiodivLabel/R/in_practice_A43.R",local = knitr::knit_global())

```


## Plant protection agents

As plant protection agent practices differ between crops, we considered that the proportion of pesticides used for the crop $c$ on the total value of pesticides in the farm $i$ is equal to the proportion of the average TFI for that crop $c$ on the sum of the average TFI of all farm crops, such as:

$$\frac{x_{i,c}}{x_i} = \frac{TFI_c \cdot SAU_{i,c}}{ \sum_{c} (TFI_c \cdot SAU_{i,c}) }$$

Thus, we estimated the value of pesticides used per hectares of the crop $c$ as follow:

$$Y_{i,c} = \frac{x_i \cdot \frac{ TFI_c \cdot SAU_{i,c}}{ \sum_{c} \big(TFI_c \cdot SAU_{i,c} \big) }}{SAU_{i,c}}$$

where:

$x$: the value of pesticides used (€) $TFI$: the average treatment frequency index (IFT) as determined by the EPK studies (2017,2018) $SAU$: the useful arable area (ha) used to cultivate crop $c$ $Y$: the value of pesticides used per hectares (€/ha) $i$: a farm $c$: a crop

Consequently, we chose a crop area allocation on arable land use type.

The TFI data were retrieve from Agreste "Pratiques culturales" studies and other local studies (all data source are mentioned in file)

```{r A.5.1}

source("~/BiodivLabel/R/in_practice_A51.R",local = knitr::knit_global())

```

# Landscape metrics

## Overview

```{r}

library(readr)
PACAGE_landscape_metrics <- read_csv("~/BiodivLabel/data_in/PACAGE_landscape_metrics.csv")


```

```{r matching_RICA-RA-SIQO}
# match RICA with RA-SIQO to obtain PACAGE
source("~/BiodivLabel/R/matching_RICA-RA-SIQO.R",local = knitr::knit_global())

```


## A.2.1	Elements of structure in the area: Semi-natural elements

```{r A.2.1}

# transfert table
tmp_TT_crops <- readxl::read_xlsx("~/BiodivLabel/data_in/supp_data.xlsx",sheet = "TT_crops") %>%
  rename(crop = RICA_code_number)

BV_A.2.1 <- RICA_2020_veg %>%
  # add land use type
  left_join(.,tmp_TT_crops %>% select(crop,land_use_type), by = join_by(CODE3 == crop)) %>%
  # summaries areas
  group_by(IDENT,CODE3,land_use_type)%>%
  summarise(
    area_ha = sum(SUPER3*10^-2,na.rm = T),
    .groups = "keep"
  ) %>% ungroup() %>%
  filter(
    # keep only crops with areas
    area_ha > 0
  ) %>%
  # add PACAGE
  inner_join(., RICA_RA %>% select(IDENT,PACAGE), by = "IDENT") %>%
  # add landscape metrics
  inner_join(., PACAGE_landscape_metrics %>%
               select(pacage,area_tot,parcelle_tot,
                      densite_ln_haie_tot,densitelnhaie_pprlandes,densitelnhaie_arbocultvigne,densitelnhaie_culture) %>%
               rename(PACAGE = pacage),
             by = "PACAGE") %>%
  # add land use types used in landscape metric estimation
  rename(farm_id = IDENT,crop = CODE3) %>%
  inner_join(.,tmp_TT_crops %>% select(crop,landscape_LU), by ="crop") %>%
  filter(!is.na(landscape_LU)) %>%
  # estimate parameter
  mutate(
    # calculate A.2.1
    A.2.1 = case_when(
      landscape_LU == "culture" ~ densitelnhaie_culture,
      landscape_LU == "prairie" ~ densitelnhaie_pprlandes,
      landscape_LU == "arboriculture" ~ densitelnhaie_arbocultvigne)) %>%
  # case when there is no value for the corresponding land use type => use farm average
  ## we considered that FADN data are more exhaustive than LPIS data regarding crops as farmers might not declare crops in LPIS for which they will not have any subsidies while such crop would be registered in their accountancy
  mutate(
    A.2.1 = case_when(
      ((landscape_LU == "culture" & is.na(densitelnhaie_culture))
       | (landscape_LU == "prairie" & is.na(densitelnhaie_pprlandes))
       | (landscape_LU == "arboriculture" & is.na(densitelnhaie_arbocultvigne)))
      ~ densite_ln_haie_tot,
      .default = A.2.1
      
    )
  )

```


## A.2.2	Field size

```{r A.2.2}

# transfert table
tmp_TT_crops <- readxl::read_xlsx("~/BiodivLabel/data_in/supp_data.xlsx",sheet = "TT_crops") %>%
  rename(crop = RICA_code_number)

BV_A.2.2 <- RICA_2020_veg %>%
  # add land use type
  left_join(.,tmp_TT_crops %>% select(crop,land_use_type), by = join_by(CODE3 == crop)) %>%
  # summaries areas
  group_by(IDENT,CODE3,land_use_type) %>%
  summarise(
    area_ha = sum(SUPER3*10^-2,na.rm = T),
    .groups = "keep"
  ) %>% ungroup() %>%
  filter(
    # keep only crops with areas
    area_ha > 0
  ) %>%
  # add PACAGE
  inner_join(., RICA_RA %>% select(IDENT,PACAGE), by = "IDENT") %>%
  # add landscape metrics
  inner_join(., PACAGE_landscape_metrics %>%
               select(pacage,area_tot,parcelle_tot,
                      moy_parcelle_tot,moy_parcelle_pprlandes,moy_parcelle_arbocultvigne,moy_parcelle_culture) %>%
               rename(PACAGE = pacage),
             by = "PACAGE") %>%
  # add land use types used in landscape metric estimation
  rename(farm_id = IDENT,crop = CODE3) %>%
  inner_join(.,tmp_TT_crops %>% select(crop,landscape_LU), by ="crop") %>%
  filter(!is.na(landscape_LU)) %>%
  # estimate parameter
  mutate(
    # calculate A.2.2
    A.2.2 = case_when(
      landscape_LU == "culture" ~ moy_parcelle_culture,
      landscape_LU == "prairie" ~ moy_parcelle_pprlandes,
      landscape_LU == "arboriculture" ~ moy_parcelle_arbocultvigne
    )) %>%
  # case when there is no value for the corresponding land use type => use farm average
  ## we considered that FADN data are more exhaustive than LPIS data regarding crops as farmers might not declare crops in LPIS for which they will not have any subsidies while such crop would be registered in their accountancy
  mutate(
    A.2.2 = case_when(
      ((landscape_LU == "culture" & is.na(moy_parcelle_culture))
       | (landscape_LU == "prairie" & is.na(moy_parcelle_pprlandes))
       | (landscape_LU == "arboriculture" & is.na(moy_parcelle_arbocultvigne)))
      ~ moy_parcelle_tot,
      .default = A.2.2
      
    )
  )

```


## A.3.2	Ground cover

```{r A.3.2}


# transfert table
tmp_TT_crops <- readxl::read_xlsx("~/BiodivLabel/data_in/supp_data.xlsx",sheet = "TT_crops") %>%
  rename(crop = RICA_code_number)

BV_A.3.2 <- RICA_2020_veg %>%
  # add land use type
  left_join(.,tmp_TT_crops %>% select(crop,land_use_type), by = join_by(CODE3 == crop)) %>%
  # summaries areas
  group_by(IDENT,CODE3,land_use_type)%>%
  summarise(
    area_ha = sum(SUPER3*10^-2,na.rm = T),
    .groups = "keep"
  ) %>% ungroup() %>%
  filter(
    # keep only crops with areas
    area_ha > 0
  ) %>%
  # add PACAGE
  inner_join(., RICA_RA %>% select(IDENT,PACAGE), by = "IDENT") %>%
  # add landscape metrics
  inner_join(., PACAGE_landscape_metrics %>%
               select(pacage,area_tot,parcelle_tot,
                      moy_pacage_cvegetale,moy_cvegetale_pprlandes,moy_cvegetale_arbocultvigne,moy_cvegetale_culture) %>%
               rename(PACAGE = pacage),
             by = "PACAGE") %>%
  # add land use types used in landscape metric estimation
  rename(farm_id = IDENT,crop = CODE3) %>%
  inner_join(.,tmp_TT_crops %>% select(crop,landscape_LU), by ="crop") %>%
  filter(!is.na(landscape_LU)) %>%
  # estimate parameter
  mutate(
    # calculate A.3.2
    A.3.2 = case_when(
      landscape_LU == "culture" ~ moy_cvegetale_culture,
      landscape_LU == "prairie" ~ moy_cvegetale_pprlandes,
      landscape_LU == "arboriculture" ~ moy_cvegetale_arbocultvigne
    )) %>%
  # case when there is no value for the corresponding land use type => use farm average
  ## we considered that FADN data are more exhaustive than LPIS data regarding crops as farmers might not declare crops in LPIS for which they will not have any subsidies while such crop would be registered in their accountancy
  mutate(
    A.3.2 = case_when(
      ((landscape_LU == "culture" & is.na(moy_cvegetale_culture))
       | (landscape_LU == "prairie" & is.na(moy_cvegetale_pprlandes))
       | (landscape_LU == "arboriculture" & is.na(moy_cvegetale_arbocultvigne)))
      ~ moy_pacage_cvegetale,
      .default = A.3.2
      
    )
  ) %>%
  # /!\ for ground cover A.3.2, the BV contribution function is decreasing, thus we take the inverse of A.3.2 as the number of day of uncovered soil
  # 2020 had 366 days
  mutate(A.3.2 = 366 - A.3.2)



```


## A.3.3	Crop Diversity

```{r A.3.3}

source("~/BiodivLabel/R/in_practice_A33.R",local = knitr::knit_global())

```

# Biodiversity: BVIAS model

## Productions végétales

```{r BVIAS_to_RICA_crops}

#source("R/TEST_SENSI_calibration.R")
source("~/BiodivLabel/R/BVIAS_out_crops.R",local = knitr::knit_global())
#save.image(paste0("~/BiodivLabel/data_CASD/main_",Sys.Date(),".RData"))

```

### Biodiversity Value Contribution

We define biodiversity value contribution functions such as Lindner (Lindner et al., 2019, 2022):

-   $BV \in [0,1]$ with $f(min) = \{0,1\}$ & $f(max) = \{1,0\}$

-   function constants are retained from Lindner 2019 and are identical for arable and pasture land use types

-   function are define based on the 95% of the lowest values for each parameters (i.e. the 5% highest values are cut off).

All input variables are normalized to $[0,1]$.

The generic expression of $y_i(x_i)$ is:

$$y_{i,l,v}= \gamma_v + \epsilon_v \cdot \exp(-\frac{|(x_{i,v}^\delta_v - \beta_v)^\alpha_v|}{2\sigma_{v}^{\alpha_{v}}})$$

where :
$i$: observation for a crop in a farm
$l$: land use type
$v$: input variable
$[\alpha_v,\beta_v,\delta_v,\epsilon_v,\gamma_v,\sigma_v]$: normalization function constant of variable $v$

### Land use specific biodiversity value

All parameters together constitute a joint biodiversity value contribution which is the arithmetic mean of the individual value contribution.

$$BV_{LU,i,l} = \sum_{v=1}^{n}(y_{i,v} \cdot z_v) $$
where
$z_v$: weighting coefficient of variable $v$ 

### Biodiversity value normalization

The normalized biodiversity value $BV_{norm}$ is calculated from the land use specific biodiversity value $BV_{LU}$ by projecting $BV_{LU}$ into the value interval of the respective land use type.

$$BV_{norm,i} = BV_{norm,j,min} + BV_{LU,i} \centerdot (BV_{norm,j,max} - BV_{norm,j,min})$$

with $j= \{forestry,pasture,arable,mining\}$

### Local biodiversity value

Unlike Lindner's model whose normalized biodiversity value $BV_{norm}$ is skewed by a function to push the less natural land uses further apart and to squeeze the more natural land uses closer together, we calculate the local biodiversity value $BV_{loc}$ as the normalized biodiversity value.

$$BV_{loc,i}= BV_{norm,i}$$

### BVIAS per kg

To obtain the BVIAS/kg, we estimated crop yields using the crop area and the crop production, for each crop in each farm. Then, we calculated the ratio between the BV_loc per ha and the yield.

## Productions animales

WIP maybe I should write a script for estimating the pseudofarm

```{r BVIAS_per_herd}

source("R/BVIAS_out_herd.R",local = knitr::knit_global())

```

$$BVIAS_{herd} = \sum(DMI_{total} \cdot BVIAS_{ha} )$$
$$BVIAS_{ha_{feed}} = \frac{\sum (\frac{DMI_{total}}{yield}  \cdot BVIAS_{ha} )} {\sum (\frac{DMI_{total}}{yield})  }$$

### Milk

$$BVIAS_{kg}^{milk} = \frac{BVIAS^{herd} \cdot GS^{milk}}{production^{milk}_{kg}} $$ 
$GS^{milk}$: part du lait dans le chiffre d'affaire (%)

```{r out_BVIAS_to_RICA_milk}

source("R/BVIAS_out_milk.R",local = knitr::knit_global())

```

### Meat
#### Beef
To be completed

#### Pork
To be completed
#### Poultry
To be completed

### Eggs
To be completed

# Match with BVIAS with RICA-RA-SIQO

```{r Applying BVIAS to matched farms}

source("R/SIQO_BVIAS.R")

# extract descriptive stat




```

```{r propensity_score_matching}

source("~/BiodivLabel/R/matching_propensity_score.R")

```

# Agricultural practices

## Crops

```{r practice_crops_names}

# set practices names ----
tmp_practice_names <- tibble(
  practice = rev(c("A.2.1",
                   "A.2.2",
                   "A.3.1",
                   "A.3.2",
                   "A.3.3",
                   "A.4.3",
                   "A.4.5",
                   "A.5.1",
                   "yield",
                   "crop_nb_LU")),
  labels = rev(c("Hedge Density (linear m / ha)",
                 "Mean Field Size (ha)",
                 "Tillage (L diesel / ha)",
                 "Soil Cover (Number of uncovered day)",
                 "Cultural Diversity (Shannon Index)",
                 "Part de fertilisation minérale (%)",
                 "Fertilization (kg N / ha)", 
                 "Pesticides (€~TFI~UDNu / ha)",
                 "Yield (kg / ha)",
                 "Crop number per land use type")))
tmp_practice_names$practice <- factor(tmp_practice_names$practice)
names(tmp_practice_names$labels) <- tmp_practice_names$practice

if (exists("practice_names")) {
  practice_names[["crops"]] <- tmp_practice_names
} else {
  practice_names <- list()
  practice_names[["crops"]] <- tmp_practice_names
}

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

```


```{r practice_crops_data}

if (exists("practice_data")) {
  practice_data[["crops"]] <- BVIAS_input %>%
    inner_join(.,BVIAS_to_RICA_RA_SIQO %>%
                 select(farm_id,land_use_type,production_type,product_name,FQS,product_FQS),
               by = join_by(farm_id, land_use_type, product_name))
} else {
  practice_data <- list()
  practice_data[["crops"]] <- BVIAS_input %>%
    inner_join(.,BVIAS_to_RICA_RA_SIQO %>%
                 select(farm_id,land_use_type,production_type,product_name,FQS,product_FQS),
               by = join_by(farm_id, land_use_type, product_name))
}

```

## Husbandry practices

### Livestock management

```{r practice_names_milk}

# set practices names ----

tmp_practice_names <- tibble(
  practice = c("yield_l_pha_ps", # pha_ps = per hectare of pseudofarm
               "yield_l_pha",
               "yield_l_panim",
               "nb_cow_pha_ps",
               "nb_cow_pha",
               "nb_cow_pMFA",
               "MFA_pcow",
               "MFA_pha_ps",
               "MFA_pha",
               "ha_perm_grassland_pha_ps",
               "ha_perm_grassland_pha",
               "ha_temp_grassland_pha_ps",
               "ha_temp_grassland_pha",
               "protein_crop_ha_pha_ps",
               "protein_crop_ha_pha",
               "feed_autonomy",
               "kg_DM_panim_maize_produced",
               "share_soybean",
               "share_concent"
  ),
  labels = c("Yield (L of milk / ha pseudofarm)",
             "Yield (L of milk / ha farm)",
             "Yield (L of milk / dairy cow)",
             "Livestock density (dairy cow / ha pseudofarm)",
             "Livestock density (dairy cow / ha farm)",
             "Livestock density (dairy cow / ha MFA)",
             "Main Forage Area (MFA / dairy cow)",
             "Share of Main Forage Area (ha MFA / ha pseudofarm)",
             "Share of Main Forage Area (ha MFA / ha farm)",
             "Share of permanent grassland (ha permanent grassland / ha pseudofarm)",
             "Share of permanent grassland (ha permanent grassland / ha farm)",
             "Share of temporary grassland (ha temporary grassland / ha pseudofarm)",
             "Share of temporary grassland (ha temporary grassland / ha farm)",
             "Share of legumes (ha legumes / ha pseudofarm)",
             "Share of legumes (ha legumes / ha farm)",
             "Feed autonomy (kg produced feed / kg total feed)",
             "Forage maize (kg of forage maize produced / dairy cow)",
             "Share of purchased soybean meal (kg soybean meal / kg total feed)",
             "Share of concentrate (kg concentrate / kg total feed)"
  ))

tmp_practice_names$practice <- factor(tmp_practice_names$practice)
names(tmp_practice_names$labels) <- tmp_practice_names$practice 

if (exists("practice_names")) {
  practice_names[["herd"]] <- tmp_practice_names
} else {
  practice_names <- list()
  practice_names[["herd"]] <- tmp_practice_names
}

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

```

```{r practice_data_milk}

source("~/BiodivLabel/R/practice_data_herd.R", encoding = 'UTF-8')

```

### Feed production

```{r practice_names_feed}

# set practices names ----

tmp_practice_names <- tibble(
  practice =
    paste0(rep(c("feed",unique(feed_by_pseudofarm$feed_origin)),each = length(practice_names$crops$practice[-1])),"_",practice_names$crops$practice[-1]),
  labels = rep(practice_names$crops$labels[-1],times = length(c("feed",unique(feed_by_pseudofarm$feed_origin))))
    ) %>%
  mutate(practice = factor(practice))
names(tmp_practice_names$labels) <- tmp_practice_names$practice


if (exists("practice_names")) {
  practice_names[["feed"]] <- tmp_practice_names
} else {
  practice_names <- list()
  practice_names[["feed"]] <- tmp_practice_names
}

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

```

```{r practice_data_feed}

# agricultural practices to produce forage ----

tmp_farm <- BVIAS_to_RICA_RA_SIQO %>%
  filter(production_type == "milk")

# add feed production practices
tmp_farm_feed <- feed_by_livestock %>%
  # filter dairy cow
  filter(code_livestock == 929) %>%
  # add practices
  left_join(.,feed_by_pseudofarm %>%
              # add crop nb
              left_join(.,BV_A.3.3 %>% select(farm_id,land_use_type,crop_nb_LU),
                        by = join_by(farm_id, land_use_type)) %>%
              # select var
              select(farm_id,feed_origin,feed_type,crop,SAU_c_ha,
                     tidyselect::all_of(practice_names$crops$practice)),
            by = join_by(farm_id, feed_type, crop, feed_origin)) %>%
  # filter farms for which we could not estimate a BVI
  filter(farm_id %in% tmp_farm$farm_id)

# summaries practices by farm => mean weighted by area
tmp_practice_feed_by_farm <- tmp_farm_feed %>%
  group_by(farm_id) %>%
    summarise(
        yield = weighted.mean(yield,SAU_c_ha,na.rm = T),
        A.2.1 = weighted.mean(A.2.1,SAU_c_ha,na.rm = T),
        A.2.2 = weighted.mean(A.2.2,SAU_c_ha,na.rm = T),
        A.3.1 = weighted.mean(A.3.1,SAU_c_ha,na.rm = T),
        A.3.2 = weighted.mean(A.3.2,SAU_c_ha,na.rm = T),
        A.3.3 = weighted.mean(A.3.3,SAU_c_ha,na.rm = T),
        A.4.3 = weighted.mean(A.4.3,SAU_c_ha,na.rm = T),
        A.4.5 = weighted.mean(A.4.5,SAU_c_ha,na.rm = T),
        A.5.1 = weighted.mean(A.5.1,SAU_c_ha,na.rm = T),
        .groups = "keep"
    ) %>% ungroup() %>%
    rename_at(vars(practice_names$crops$practice[-1]),
            ~paste0("feed_",practice_names$crops$practice[-1]))

# summaries practices by farm and origin => mean weighted by area
tmp_practice_feed_by_origin <- tmp_farm_feed %>%
  group_by(farm_id,feed_origin) %>%
    summarise(
        yield = weighted.mean(yield,SAU_c_ha,na.rm = T),
        A.2.1 = weighted.mean(A.2.1,SAU_c_ha,na.rm = T),
        A.2.2 = weighted.mean(A.2.2,SAU_c_ha,na.rm = T),
        A.3.1 = weighted.mean(A.3.1,SAU_c_ha,na.rm = T),
        A.3.2 = weighted.mean(A.3.2,SAU_c_ha,na.rm = T),
        A.3.3 = weighted.mean(A.3.3,SAU_c_ha,na.rm = T),
        A.4.3 = weighted.mean(A.4.3,SAU_c_ha,na.rm = T),
        A.4.5 = weighted.mean(A.4.5,SAU_c_ha,na.rm = T),
        A.5.1 = weighted.mean(A.5.1,SAU_c_ha,na.rm = T),
        .groups = "keep"
    ) %>% ungroup() %>%
  pivot_wider(.,
              id_cols = farm_id,
              names_from = feed_origin,
              values_from = all_of(practice_names$crops$practice[-1]),
              names_glue = "{feed_origin}_{.value}")

tmp_practice_data <- tmp_farm %>%
  select(farm_id,production_type,product_name,FQS,product_FQS) %>%
  inner_join(.,tmp_practice_feed_by_farm,
             by = join_by(farm_id)) %>%
  inner_join(.,tmp_practice_feed_by_origin,
             by = join_by(farm_id))

tmp_practice_data_feed <- tmp_practice_data %>%
  mutate(product_name = "Lait",production_type = "milk")


if (exists("practice_data")) {
  practice_data[["feed"]] <- tmp_practice_data_feed

} else {
  practice_data <- list()
  practice_data[["feed"]] <- tmp_practice_data_feed 
}

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])


```

### Practice BVIAS

```{r practice_BVIAS}

tmp_practice_names <- tibble(
  "practice" = factor(x = c("BVI_ha","BVI_kg","BVI_t"),
                      levels = c("BVI_ha","BVI_kg","BVI_t")),
  "labels" = c("BVIAS (ha)","BVIAS (kg)","BVIAS (t)"))
names(tmp_practice_names$labels) <- tmp_practice_names$practice

if (exists("practice_names")) {
  practice_names[["BVIAS"]] <- tmp_practice_names
} else {
  practice_names <- list()
  practice_names[["BVIAS"]] <- tmp_practice_names
}

if (exists("practice_data")) {
  practice_data[["BVIAS"]] <- BVIAS_to_RICA_RA_SIQO %>%
    mutate(BVI_t = BVI_kg * 10^3)
  
} else {
  practice_data <- list()
  practice_data[["BVIAS"]] <- BVIAS_to_RICA_RA_SIQO %>%
    mutate(BVI_t = BVI_kg * 10^3)
}

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

```

# Statistical testing

```{r stat_tests}

source("~/BiodivLabel/R/BVIAS_stat_tests.R")

save.image(paste0("~/BiodivLabel/data_CASD/main_",Sys.Date(),".RData"))

```



# Export data

```{r stat_desc_OTEX}

# RICA-RA-SIQO ----

# transfert table
tmp_TT_crops <- readxl::read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops") %>%
  rename(crop = RICA_code_number)
tmp_TT_livestock <- readxl::read_xlsx("data_in/supp_data.xlsx", sheet ="TT_livestock") %>%
  rename(code_livestock = RICA_code_number)
tmp_TT_livestock_product <- readxl::read_xlsx("data_in/supp_data.xlsx",sheet = "TT_livestock_products") %>%
  rename(code_anim_prod = RICA_code_number) %>%
  select(code_anim_prod,Libelle,RICA_QPROD7_unit,species, production_type) %>%
  distinct()
tmp_TT_RICA_SIQO <- readxl::read_xlsx("~/BiodivLabel/data_in/supp_data.xlsx",sheet = "TT_RICA_SIQO") %>%
  rename(crop = RICA_var_code)

tmp_data_RICA_RA_SIQO <- practice_data$BVIAS %>%
  # add OTEX
  left_join(.,
            RICA_2020 %>% select(IDENT,OTEFDA) %>%
              rename(farm_id = IDENT),
            by = join_by(farm_id)) %>%
  # add crop area
  left_join(.,RICA_2020_veg %>%
              rename(farm_id = IDENT,crop = CODE3) %>%
              filter(crop %in% tmp_TT_crops$crop[tmp_TT_crops$land_use_type == "arable"]) %>%
              group_by(farm_id) %>%
              summarise(crop_area_ha = sum(SUPER3,na.rm=T)*10^-2),
            by = join_by(farm_id)) %>%
  # add grassland area
  left_join(.,RICA_2020_veg %>%
              rename(farm_id = IDENT,crop = CODE3) %>%
              filter(crop %in% tmp_TT_crops$crop[tmp_TT_crops$land_use_type == "grassland"]) %>%
              group_by(farm_id) %>%
              summarise(grassland_area_ha = sum(SUPER3,na.rm=T)*10^-2),
            by = join_by(farm_id)) %>%
  # number dairy cows
  left_join(.,  RICA_2020_ani %>%
              rename(farm_id = IDENT,code_livestock = CODE6) %>%
              filter(code_livestock == 929) %>%
              group_by(farm_id) %>%
              summarise(nb_dairy_cow = sum(EFFEC6,na.rm=T)*tmp_TT_livestock$EFFEC6_unit[tmp_TT_livestock$code_livestock == 929]),
            by = join_by(farm_id)) %>% 
  # wheat yield
  left_join(.,RICA_2020_veg %>%
              rename(farm_id = IDENT,crop = CODE3) %>%
              filter(crop == 111) %>%
              group_by(farm_id) %>%
              summarise(wheat_yield_kg_ha = (sum(QPROD3,na.rm=T)*10^2)/(sum(SUPER3,na.rm=T)*10^-2)),
            by = join_by(farm_id)) %>%
  # milk yield
  left_join(.,RICA_2020_pan %>%
              rename(farm_id = IDENT,code_anim_prod = CODE7) %>%
              filter(code_anim_prod %in% c(21,22)) %>%
              group_by(farm_id) %>%
              summarise(milk_yield_kg = sum(QPROD7,na.rm = T)*10^2),
            by = join_by(farm_id)) %>%
  mutate(milk_yield_kg_cow = milk_yield_kg/nb_dairy_cow)

tmp_data_RICA_RA_SIQO_summary <- tmp_data_RICA_RA_SIQO %>%
  group_by(OTEFDA,FQS) %>%
  summarise(
    # nb farms
    nobs = length(unique(farm_id)),
    # crop area
    crop_area_ha = mean(crop_area_ha,na.rm = T),
    # grassland area
    grassland_area_ha = mean(grassland_area_ha,na.rm = T),
    # nb dairy cows
    nb_dairy_cow = mean(nb_dairy_cow,na.rm = T),
    # wheat yield
    wheat_yield_t_ha = mean(wheat_yield_kg_ha*10^-3,na.rm = T),
    # milk yield
    milk_yield_kg = mean(milk_yield_kg,na.rm = T),
    milk_yield_kg_cow = mean(milk_yield_kg_cow,na.rm = T),
    .groups = "keep"
  ) %>%
  # filter nobs >3
  filter(nobs >3)

write.csv(tmp_data_RICA_RA_SIQO_summary,
          paste0("~/BiodivLabel/data_out/stat_desc_by_OTEX_",Sys.Date(),".csv"),quote = F,row.names = F)

```

```{r stat_input_by_LU}

library(modelsummary)
library(gt)

tmp_input_arable = optim_final$MSE$MSE_optim$x_norm %>%
  filter(land_use_type == "arable")

tmp_table = datasummary(metric_number * (value + x_max + x_norm) ~ Mean + SD + Min + P25 + Median + P75 + Max,data = tmp_input_arable,output = "data.frame")
write.csv(x = tmp_table,paste0("~/BiodivLabel/data_out/stat_input_by_LU_arable_",Sys.Date(),".csv"),row.names = F)

tmp_plot = tmp_input_arable %>%
  ggplot( ) +
  aes(x = x_max) +
  geom_histogram(bins = 100L, fill = "#112446") +
  labs(
    x = "Value",
    y = "Number of observation (crop x farm)",
    title = "Distribution of input variables for arable land use type"
  ) +
  theme_minimal() +
  facet_wrap(vars(metric_number), scales = "free")
ggsave(filename = paste0("~/BiodivLabel/data_out/stat_input_by_LU_arable_",Sys.Date(),".svg"), plot = tmp_plot,width = 30,height = 20,units = "cm")

tmp_input_grassland = optim_final$MSE$MSE_optim$x_norm %>%
  filter(land_use_type == "grassland")

tmp_table = datasummary(metric_number * (value + x_max + x_norm) ~ Mean + SD + Min + P25 + Median + P75 + Max,data = tmp_input_grassland,output = "data.frame")
write.csv(x = tmp_table,paste0("~/BiodivLabel/data_out/stat_input_by_LU_grassland_",Sys.Date(),".csv"),row.names = F)

tmp_plot = tmp_input_grassland %>%
  ggplot( ) +
  aes(x = x_max) +
  geom_histogram(bins = 100L, fill = "#112446") +
  labs(
    x = "Value",
    y = "Number of observation (crop x farm)",
    title = "Distribution of input variables for grassland land use type"
  ) +
  theme_minimal() +
  facet_wrap(vars(metric_number), scales = "free")
ggsave(filename = paste0("~/BiodivLabel/data_out/stat_input_by_LU_grassland_",Sys.Date(),".svg"), plot = tmp_plot,width = 30,height = 20,units = "cm")


```

```{r stat_desc_full}

rm(stat_desc)
library(tidyr)
library(dplyr)

for (tmp_data_in_ls in names(practice_data)) {
#tmp_data_in_ls = names(practice_data)[1]
  print(tmp_data_in_ls)
  
  tmp_loop1_practice_names <- practice_names[[tmp_data_in_ls]]
  
  tmp_loop1_practice_data <- practice_data[[tmp_data_in_ls]] %>%
    select(farm_id,production_type,product_name,FQS,product_FQS,
           tidyselect::all_of(tmp_loop1_practice_names$practice))
  
  tmp_loop1_practice_data_matched <- matched_data %>%
    select(farm_id,production_type,product_name,FQS,product_FQS,match) %>%
    inner_join(.,tmp_loop1_practice_data,
               by = join_by(farm_id, production_type, product_name, FQS, product_FQS))
  
  tmp_var = levels(tmp_loop1_practice_names$practice)
  
  # unmatched data
  tmp_loop2_practice_data <- tmp_loop1_practice_data %>%
    pivot_longer(cols = tidyselect::all_of(tmp_loop1_practice_names$practice),
                 names_to = "practice",
                 values_to = "value") %>%
    # summarise
    group_by(production_type,product_name,FQS,product_FQS,practice) %>%
    summarise(
      mean = mean(value,na.rm = T),
      sd = sd(value,na.rm = T),
      nobs = length(unique(farm_id)),
      q0 = quantile(value,0.00,na.rm = T),
      q5 = quantile(value,0.05,na.rm = T),
      q25 = quantile(value,0.25,na.rm = T),
      q50 = quantile(value,0.50,na.rm = T),
      q75 = quantile(value,0.75,na.rm = T),
      q95 = quantile(value,0.95,na.rm = T),
      q100 = quantile(value,1,na.rm = T),
      .groups = "keep"
    ) %>%
    ungroup() %>%
    mutate(se = sd/sqrt(nobs)) %>%
    # remove products with <= 30 obs
    filter(nobs >= 30) %>%
    # add match variable
    mutate(match = "no_match")
  
  # matched data
  tmp_loop2_practice_data_matched <- tmp_loop1_practice_data_matched %>%
    select(farm_id,production_type,product_name,FQS,product_FQS,match,
           tidyselect::all_of(tmp_loop1_practice_names$practice)) %>%
    pivot_longer(cols = tidyselect::all_of(tmp_loop1_practice_names$practice),
                 names_to = "practice",
                 values_to = "value") %>%
    # summarise
    group_by(production_type,product_name,FQS,product_FQS,match,practice) %>%
    summarise(
      mean = mean(value,na.rm = T),
      sd = sd(value,na.rm = T),
      nobs = length(unique(farm_id)),
      q0 = quantile(value,0.00,na.rm = T),
      q5 = quantile(value,0.05,na.rm = T),
      q25 = quantile(value,0.25,na.rm = T),
      q50 = quantile(value,0.50,na.rm = T),
      q75 = quantile(value,0.75,na.rm = T),
      q95 = quantile(value,0.95,na.rm = T),
      q100 = quantile(value,1,na.rm = T),
      .groups = "keep"
    ) %>%
    ungroup() %>%
    mutate(se = sd/sqrt(nobs))
  
  # extract tibble
  if (exists("stat_desc")) {
    
    stat_desc <- stat_desc %>%
      bind_rows(., tmp_loop2_practice_data %>%
                  mutate(practice_subset = tmp_data_in_ls)) %>%
      bind_rows(., tmp_loop2_practice_data_matched %>%
                  mutate(practice_subset = tmp_data_in_ls))    
  } else {
    
    stat_desc <- bind_rows(tmp_loop2_practice_data,
                           tmp_loop2_practice_data_matched) %>%
      mutate(practice_subset = tmp_data_in_ls)
    
  }

  rm(list = names(.GlobalEnv)[grep("tmp_loop2",names(.GlobalEnv))])
  rm(list = names(.GlobalEnv)[grep("tmp_loop1",names(.GlobalEnv))])
  
}

write.csv(stat_desc,paste0("~/BiodivLabel/data_out/stat_desc_BVIAS_SIQO_",Sys.Date(),".csv"),quote = F,row.names = F)

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

```

```{r numbers}

# AC ----
load("~/BiodivLabel/data_CASD/RA_2020.RData")
load("~/BiodivLabel/data_CASD/RA_SIQO_2020.RData")

# how many farms in AC?
length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER)))

# how many farms with a FQS in AC?
length(unique(na.omit(c(tmp_SIQO_RA_farm$NOM_DOSSIER,
                            tmp_RA2020_IDADMIN$NOM_DOSSIER[tmp_RA2020_EXPLOIT$BIO_INTEGRAL == 1]))))
## % farms with FQS including organic in AC
round(length(unique(na.omit(c(tmp_SIQO_RA_farm$NOM_DOSSIER,
                            tmp_RA2020_IDADMIN$NOM_DOSSIER[tmp_RA2020_EXPLOIT$BIO_INTEGRAL == 1])))) / length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER)))*100)
# how manyn farms with a FQS (excluding wine and other spirits and including organic) in AC?
length(unique(na.omit(c(tmp_SIQO_RA_product$NOM_DOSSIER[!grepl(c(" VINS|EAUXDEVIE"),tmp_SIQO_RA_product$SIQO_FILIERE)],
                        tmp_RA2020_IDADMIN$NOM_DOSSIER[tmp_RA2020_EXPLOIT$BIO_INTEGRAL == 1]))))

# how many farms with a FQS excluding organic in AC?
length(unique(na.omit(tmp_SIQO_RA_farm$NOM_DOSSIER)))
## % farms with FQS excluding organic in AC
round(length(unique(na.omit(tmp_SIQO_RA_farm$NOM_DOSSIER))) / length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER)))*100)
# how manyn farms with a FQS (excluding wine and other spirits and organic) in AC?
length(unique(na.omit(tmp_SIQO_RA_product$NOM_DOSSIER[
  !grepl(c(" VINS|EAUXDEVIE"),tmp_SIQO_RA_product$SIQO_FILIERE)
])))

# how many organic farms in AC?
length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER[
  tmp_RA2020_EXPLOIT$BIO_INTEGRAL == 1
])))
# % farms with organic in AC?
round(length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER[
  tmp_RA2020_EXPLOIT$BIO_INTEGRAL == 1
])))
/ length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER)))*100)


## RICA ----
# how many farms in RICA?
length(unique(na.omit(RICA_2020$IDENT)))
# how many farms with a FQS in RICA?
length(unique(na.omit(RICA_RA_SIQO_product_all$IDENT[!is.na(RICA_RA_SIQO_product_all$CODE_PRODUIT)])))
# % farms with a FQS among all FADN farms
round(length(unique(na.omit(RICA_RA_SIQO_product_all$IDENT[!is.na(RICA_RA_SIQO_product_all$CODE_PRODUIT)])))
      / length(unique(na.omit(RICA_2020$IDENT)))*100)
# % of farms with a wine FQS?
round(length(setdiff(
  unique(na.omit(RICA_RA_SIQO_product_all$IDENT[!is.na(RICA_RA_SIQO_product_all$CODE_PRODUIT)])),
  unique(na.omit(RICA_RA_SIQO_product$IDENT[!is.na(RICA_RA_SIQO_product$CODE_PRODUIT)]))
  ))
/ length(unique(na.omit(RICA_RA_SIQO_product_all$IDENT[!is.na(RICA_RA_SIQO_product_all$CODE_PRODUIT)])))*100)
# how many farms with a FQS (excluding wine and other spirits and organic)?
length(unique(na.omit(RICA_RA_SIQO_product$IDENT[!is.na(RICA_RA_SIQO_product$CODE_PRODUIT)])))
# how many FQS, excluding wine and other spirits and organic?
length(unique(na.omit(RICA_RA_SIQO_product$LIBELLE_PRODUIT[!is.na(RICA_RA_SIQO_product$CODE_PRODUIT)])))
# % farms with FQS (excluding wine and other spirits and organic) in RICA among AC?
round(length(unique(na.omit(RICA_RA_SIQO_product$IDENT[!is.na(RICA_RA_SIQO_product$CODE_PRODUIT)])))
/ length(unique(na.omit(tmp_SIQO_RA_product$NOM_DOSSIER[
  !grepl(c(" VINS|EAUXDEVIE"),tmp_SIQO_RA_product$SIQO_FILIERE)])))*100)
# % farms with organic in RICA among AC?
round(
  length(unique(na.omit(RICA_RA_SIQO_product_all$IDENT[RICA_RA_SIQO_product_all$org_farming == T])))
  / length(unique(na.omit(tmp_RA2020_IDADMIN$NOM_DOSSIER[tmp_RA2020_EXPLOIT$BIO_INTEGRAL == 1])))*100
)

# how many farms with a BVIAS score?
length(unique(na.omit(practice_data$BVIAS$farm_id)))
# % farms organic among those with a BVIAS score
round(
  length(unique(na.omit(practice_data$BVIAS$farm_id[practice_data$BVIAS$FQS == "AB"])))
  / length(unique(na.omit(practice_data$BVIAS$farm_id)))*100)
# % farms FQS (ecluding wine and other spirits and organic) among those with a BVIAS score
round(
  length(unique(na.omit(intersect(
    RICA_RA_SIQO_product$IDENT[!is.na(RICA_RA_SIQO_product$SIQO_FILIERE)],
    practice_data$BVIAS$farm_id))))
  / length(unique(na.omit(practice_data$BVIAS$farm_id)))*100)

# nb farm HVE
length(unique(na.omit(intersect(
  RICA_RA_SIQO_product$IDENT[RICA_RA_SIQO_product$HVE == 1],
  practice_data$BVIAS$farm_id))))
# % HVE
round(
  length(unique(na.omit(intersect(
    RICA_RA_SIQO_product$IDENT[RICA_RA_SIQO_product$HVE == 1],
    practice_data$BVIAS$farm_id))))
  / length(unique(na.omit(practice_data$BVIAS$farm_id)))*100)


# Average impact on biodiversity ----

# Initial focus on cereals and milk farms
length(unique(practice_data$BVIAS$farm_id[
  practice_data$BVIAS$product_name %in% stat_paired_t_test$product_name 
  & practice_data$BVIAS$FQS %in% stat_paired_t_test$FQS]))

# transfert table
tmp_TT_crops <- readxl::read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops") %>%
  rename(crop = RICA_code_number)

# average impact of cereals
## conv
round(mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_ha[
  BVIAS_to_RICA_RA_SIQO_crops$crop %in% tmp_TT_crops$crop[tmp_TT_crops$species == "cereal"]
  & BVIAS_to_RICA_RA_SIQO_crops$org_farming == F]),2)
# organic
round(mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_ha[
  BVIAS_to_RICA_RA_SIQO_crops$crop %in% tmp_TT_crops$crop[tmp_TT_crops$species == "cereal"]
  & BVIAS_to_RICA_RA_SIQO_crops$org_farming == T]),2)

# average BV of wheat
mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_ha[
  BVIAS_to_RICA_RA_SIQO_crops$crop == "111"
  & BVIAS_to_RICA_RA_SIQO_crops$FQS == "Conventionnel"])
mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_ha[
  BVIAS_to_RICA_RA_SIQO_crops$crop == "111"
  & BVIAS_to_RICA_RA_SIQO_crops$FQS == "AB"])

((1-mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_ha[
    BVIAS_to_RICA_RA_SIQO_crops$crop == "111"
    & BVIAS_to_RICA_RA_SIQO_crops$org_farming == T]))
                   / (1-mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_ha[
    BVIAS_to_RICA_RA_SIQO_crops$crop == "111"
    & BVIAS_to_RICA_RA_SIQO_crops$org_farming == F])))


# average impact of milk
## conv
round(mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Conventionnel"]),2)
# organic
round(mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "AB"]),2)
# Comté - Morbier
round(mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Comte - Morbier"]),2)
## % conv
round((1-mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Comte - Morbier"])
  /mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Conventionnel"]))*100)
## % counterfactual
round((1-mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Comte - Morbier"])
  /mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Conventionnel"
  & BVIAS_to_RICA_RA_SIQO_milk$farm_id %in% matched_data$farm_id[
    matched_data$FQS == "Conventionnel" 
    & matched_data$match == "Lait__Comte - Morbier"]]))*100)
# Beurre Charentes - Poitou
round(mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Beurre de Charentes-Poitou"]),2)

round(1-(mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[BVIAS_to_RICA_RA_SIQO_milk$FQS == "Comte - Morbier"]) / mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_ha_feed[BVIAS_to_RICA_RA_SIQO_milk$FQS == "Conventionnel" & BVIAS_to_RICA_RA_SIQO_milk$farm_id %in% matched_data$farm_id[matched_data$match == "Lait__Comte - Morbier"]]))
*100)
# average BV of wheat per tonne
mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_kg[
  BVIAS_to_RICA_RA_SIQO_crops$crop == "111"
  & BVIAS_to_RICA_RA_SIQO_crops$FQS == "Conventionnel"])*10^3
mean(BVIAS_to_RICA_RA_SIQO_crops$BVI_kg[
  BVIAS_to_RICA_RA_SIQO_crops$crop == "111"
  & BVIAS_to_RICA_RA_SIQO_crops$FQS == "AB"])*10^3

# average impact of milk per tonne
mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_kg[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Conventionnel"])*10^3
mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_kg[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "AB"])*10^3
mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_kg[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Comte - Morbier"])*10^3
mean(BVIAS_to_RICA_RA_SIQO_milk$BVI_kg[
  BVIAS_to_RICA_RA_SIQO_milk$FQS == "Beurre de Charentes-Poitou"])*10^3



```

```{r clean}

rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])

save.image(paste0("~/BiodivLabel/data_CASD/main_",Sys.Date(),".RData"))

```
