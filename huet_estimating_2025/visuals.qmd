---
title: "BiodivLabel Analysis Script"
author: "Sarah Huet"
format: pdf
editor: source
editor_options: 
  chunk_output_type: console
knitr: 
  opts_chunk: 
    collapse: true
    comment: "#>"
    R.options:
      knitr.graphics.auto_pdf: true
---

# Data

```{r import_data}

library(readr)

stat_desc = read_csv("~/BiodivLabel/CASD_export/CASD_export_241017/stat_desc_BVIAS_SIQO2024-10-17.csv", 
                            col_types = cols(mean = col_double(), 
                                             sd = col_double(), nobs = col_double(), 
                                             q0 = col_double()))[,1:18]

stat_tukey_hsd = readr::read_csv("~/BiodivLabel/CASD_export/CASD_export_241017/tmp_TukeyHSD_2024-10-17.csv")

stat_paired_t_test = readr::read_csv("~/BiodivLabel/CASD_export/CASD_export_241017/tmp_paired_ttest_2024-10-17.csv")
  
```


```{r product_names, include=FALSE, echo=FALSE}
library(tibble)

tmp_product_names <- tibble(
  product_name = c(
    "Ble_tendre",
    "Mais_grain",
    "Triticale",
    "Melange_cereales_d_ete",
    "Autres_cereales",
    "Orge_d_hiver_et_escourgeon",
    "Orge_de_printemps",
    "Tournesol",
    "Lait" 
  ),
  labels = c(
    "Soft Wheat",
    "Grain Maize",
    "Triticale",
    "Summer Cereal Mix",
    "Other Cereals",
    "Winter Barley",
    "Spring Barley",
    "Tournesol",
    "Milk" 
  )
) %>%
  mutate(
    plot = case_when(
      product_name %in% c("Ble_tendre","Mais_grain","Lait") ~T,
      .default = F
    )
  )

tmp_FQS_names <- tibble(
  FQS = c(
    "Conventionnel",
    "AB",
    "LR",
    "Comte - Morbier",
    "Beurre de Charentes-Poitou",
    "AOP - AOC",
    "Bleu d'Auvergne - Cantal",
    "Fromages de Savoie",
    "Munster",
    "Counterfactual"
  ),
  labels = c(
    "Conventional",
    "Organic Farming",
    "Label Rouge",
    "Comté - Morbier",
    "Charentes-Poitou Butter",
    "AOP - AOC",
    "Bleu d'Auvergne - Cantal",
    "Savoie Cheeses",
    "Munster",
    "Counterfactual"
  ),
  colors = c(
    "darkgrey",
    "palegreen3",
    "indianred",
    "plum4",
    "plum4",
    "plum4",
    "plum4",
    "goldenrod3",
    "plum4",
    "#333333"
)) %>%
  mutate(
    plot = case_when(
      FQS %in% c("Conventionnel","AB","LR","Beurre de Charentes-Poitou","Comte - Morbier") ~T,
      .default = F
    ))
names(tmp_FQS_names$colors) <- tmp_FQS_names$labels 
names(tmp_FQS_names$labels) <- tmp_FQS_names$labels

# practice names
tmp_practice_names <- Reduce(bind_rows,list(
  practice_names$BVIAS,
  practice_names$crops,
  practice_names$herd,
  practice_names$feed
))

```

```{r practices_names}

library(dplyr)

# crops ----
tmp_practice_names <- tibble(
  practice = rev(c("A.2.1",
                   "A.2.2",
                   "A.3.2",
                   "A.3.3",
                   "A.3.1",
                   "A.4.3",
                   "A.4.5",
                   "A.5.1",
                   "yield")),
  labels = rev(c("Hedge density \n (linear meter / ha)",
                 "Mean Field Size (ha)",
                 "Soil cover (number of uncovered day)",
                 "Cultural Diversity (Shannon Index)",
                 "Tillage (L diesel / ha)",
                 "Share of mineral fertilizer (%)",
                 "Fertilization (kg N / ha)", 
                 "Pesticides (€~TFI~UDNu / ha)",
                 "Yield (kg / ha)")))
tmp_practice_names$practice <- factor(tmp_practice_names$practice)
names(tmp_practice_names$labels) <- tmp_practice_names$practice

if (exists("practice_names")) {
  practice_names[["crops"]] <- tmp_practice_names
} else {
  practice_names = list()
  practice_names[["crops"]] <- tmp_practice_names
}

# Herd ----

tmp_practice_names <- tibble(
  practice = c("yield_l_pha",
               "yield_l_panim",
               "nb_cow_pha",
               "cow_pMFA",
               "feed_autonomy",
               "kg_DM_panim_maize_produced",
               #"kg_DM_panim_soy_meal",
               "share_soybean",
               #"share_concent_purchased",
               "share_concent",
               "protein_crop_ha_pha_pseudofarm",
               "MFA_pcow",
               "MFA_pha_pseudofarm",
               "ha_temp_pasture_pha_pseudofarm",
               "grassland_share_pseudofarm"#,
               #"grassland_share_farm"
  ),
  labels = c("Yield (L milk / ha pseudofarm)",
             "Yield (L milk / dairy cow)",
             "Livestock density (dairy cow / ha pseudofarm)",
             "Livestock density (dairy cow / ha MFA)",
             "Feed autonomy (kg produced feed / kg feed)",
             "Forage maize (kg produced forage maize / dairy cow)",
             #"Soyben meal (kg purchased soybean meal / dairy cow)",
             "Soybean meal (kg purchased soybean meal / kg feed)",
             #"Part des concentrés dans les aliments achetés (kg de concentrés / kg d'aliments achetés)",
             "Concentrate (kg concentrate / kg feed)",
             "Legumes (ha legumes / ha pseudofarm",
             "Main Forage Area (MFA / dairy cow)",
             "Main Forage Area (ha MFA / ha pseudofarm)",
             "Temporary meadows (ha temp. meadow / ha pseudofarm)",
             "Permanent grassland (ha perm. grassland / ha pseudofarm)"#,
             #"Part des prairies permanentes (ha prairie / ha ferme)"
  ))

tmp_practice_names$practice <- factor(tmp_practice_names$practice)
names(tmp_practice_names$labels) <- tmp_practice_names$practice

if (exists("practice_names")) {
  practice_names[["herd"]] <- tmp_practice_names
} else {
  practice_names = list()
  practice_names[["herd"]] <- tmp_practice_names
}

# Feed ----

tmp_practice_names <- practice_names$crop %>%
  mutate(practice = factor(paste0("feed_",practice)))
names(tmp_practice_names$labels) <- tmp_practice_names$practice

if (exists("practice_names")) {
  practice_names[["feed"]] <- tmp_practice_names
} else {
  practice_names = list()
  practice_names[["feed"]] <- tmp_practice_names
}

# BVIAS ----

tmp_practice_names <- tibble(
  "practice" = c("BVIAS_ha","BVIAS_kg","BVIAS_t"),
  "labels" = c("BVIAS (ha)","BVIAS (kg)","BVIAS (t)"))
tmp_practice_names$practice <- factor(tmp_practice_names$practice)
names(tmp_practice_names$labels) <- tmp_practice_names$practice

if (exists("practice_names")) {
    practice_names[["BVIAS"]] <- tmp_practice_names
} else {
  practice_names = list()
  practice_names[["BVIAS"]] <- tmp_practice_names
}

# all ----
# practice names
tmp_practice_names <- Reduce(bind_rows,list(
  practice_names$BVIAS,
  practice_names$crops,
  practice_names$herd,
  practice_names$feed
))

```

```{r tbl-results, include=FALSE, echo=FALSE}

library(dplyr)
library(tidyr)

# Table ----

tmp_table0 <- stat_desc %>%
  # add unmatched stat test
  left_join(.,stat_tukey_hsd %>%
              select(production_type, product_name, FQS, product_FQS, practice, practice_subset,
                     stat_grp,stat_grp_conv,stat_grp_conv_diff,mean_conv_diff,pval_tukey) %>%
              mutate(match = "no_match"),
            by = join_by(production_type, product_name, FQS, product_FQS, practice, practice_subset,match)) %>%
  # add matching results
  left_join(.,stat_paired_t_test %>% 
              select(production_type, product_name, FQS, practice, match,
                     mean_diff_match,pval_pttest,padjust_bonf),
            by = join_by(production_type, product_name, FQS, practice, match)) %>%
  # order factors
  mutate(
    practice = factor(practice,levels = tmp_practice_names$practice,labels = tmp_practice_names$labels,ordered = T),
    product_name = factor(product_name,levels = tmp_product_names$product_name,labels = tmp_product_names$labels,ordered = T),
    FQS = factor(FQS,levels = tmp_FQS_names$FQS,labels = tmp_FQS_names$labels,ordered = T)
  )

```

# Main

## fig-results_ha

```{r BVIAS_ha}

library(dplyr)
library(tidyr)
library(ggplot2)


# plot data ----

tmp_plot_data <- tmp_table0 %>%
  # select only one practice for some products
  filter(
    practice == tmp_practice_names$labels[tmp_practice_names$practice == "BVIAS_ha"]
    & product_name %in% tmp_product_names$labels[tmp_product_names$plot == T]
    & FQS %in% tmp_FQS_names$labels[tmp_FQS_names$plot == T]) %>%
  # change names for conterfactuals
  filter(match == "no_match" | FQS == "Conventional") %>%
  mutate(FQS = factor(case_when(
    match == "no_match" ~ FQS,
    match != "no_match" ~ "Counterfactual"
  ))) %>%
  # add asterisk when signif
  mutate(
    stat_grp = case_when(
      match == "no_match" ~ stat_grp,
      match != "no_match" & padjust_bonf <= 0.05 ~ "*",
      .default = ""
  )) %>%
  # add plot_x
  mutate(
    plot_x = paste0(product_name,match,FQS)
  )


# plot order ----

tmp_plot_order <- tibble(
  plot_x = rev(c("Soft Wheatno_matchConventional",
                 "Soft Wheatno_matchOrganic Farming",
                 "Soft WheatBle_tendre__ABCounterfactual",
                 "Soft Wheatno_matchLabel Rouge",
                 "Soft WheatBle_tendre__LRCounterfactual",
                 "Grain Maizeno_matchConventional",
                 "Grain Maizeno_matchOrganic Farming",
                 "Grain MaizeMais_grain__ABCounterfactual",
                 "Milkno_matchConventional",
                 "Milkno_matchOrganic Farming",
                 "MilkLait__ABCounterfactual",
                 "Milkno_matchCharentes-Poitou Butter",
                 "MilkLait__Beurre de Charentes-PoitouCounterfactual",
                 "Milkno_matchComté - Morbier",
                 "MilkLait__Comte - MorbierCounterfactual"
                 )),
  labels = rev(c("Soft Wheat - Conventional",
                 "Soft Wheat - Organic Farming",
                 "Soft Wheat - Counterfactual Organic Farming",
                 "Soft Wheat - Label Rouge",
                 "Soft Wheat - Counterfactual Label Rouge",
                 "Grain Maize - Conventional",
                 "Grain Maize - Organic Farming",
                 "Grain Maize - Counterfactual Organic Farming",
                 "Milk - Conventional",
                 "Milk - Organic Farming",
                 "Milk - Counterfactual Organic Farming",
                 "Milk - Charentes-Poitou Butter",
                 "Milk - Counterfactual Charentes-Poitou Butter",
                 "Milk - Comte - Morbier",
                 "Milk - Counterfactual Comte - Morbier")))

tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
                               levels = tmp_plot_order$plot_x,
                               labels = tmp_plot_order$labels)
tmp_plot_data <- tmp_plot_data %>% filter(!is.na(plot_x))
tmp_plot_data$production_type <- toupper(tmp_plot_data$production_type)

# plot ----

ggplot() +
  # mean
  geom_point(data = tmp_plot_data,
             aes(x = plot_x, y = mean, fill = FQS,colour = FQS),
             shape = 21, size=2, stroke = 1, position = position_dodge(width = 0.75)) +
  # CI95%
  geom_errorbar(data = tmp_plot_data,
                aes(x = plot_x, ymin = mean-1.96*(sd/sqrt(nobs)), ymax = mean+1.96*(sd/sqrt(nobs)), colour = FQS),
                linewidth=1,width = 0.5,position = position_dodge(width = 0.75)) +
  # sd
  geom_errorbar(data = tmp_plot_data,
                aes(x = plot_x, ymin = mean-sd, ymax = mean+sd, colour = FQS),
                linewidth=0.5,width = 0.5,linetype = "dashed",position = position_dodge(width = 0.75)) +
  # n
  geom_text(data = tmp_plot_data,
            aes(x = plot_x, y=max(mean+sd)*1.1,colour = FQS,label = paste0("n = ",as.character(nobs))),
            size=5,position = position_dodge(width = 1)) +
  # stat groups
  geom_text(data = tmp_plot_data,
            aes(x = plot_x,y=0,colour = FQS,label = stat_grp),
            size=5,position = position_dodge(width = 1))+
  # theme
  coord_flip() +
  ylim(c(0,max(tmp_plot_data$mean+tmp_plot_data$sd)*1.2)) +
  facet_wrap(vars(production_type),scales = "free_y",ncol = 1,
             labeller = labeller(crop = "Crops", milk = "Milk")) +
  labs(y = "BVIAS_ha",x= "Products") +
  scale_fill_manual(values = tmp_FQS_names$colors,labels = tmp_FQS_names$labels,) +
  scale_colour_manual(values = tmp_FQS_names$colors,labels = tmp_FQS_names$labels) +
  theme_light() +
  theme(legend.position = "none",
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_rect(
          color="#cccccc", fill="white", linewidth = 1, linetype="solid"),
        strip.text = element_text(colour = "#333333"))

```

## fig-results_t

```{r BVIAS_t}

library(dplyr)
library(tidyr)
library(ggplot2)
# plot data ----

tmp_plot_data <- tmp_table0 %>%
  # select only one practice for some products
  filter(
    practice == tmp_practice_names$labels[tmp_practice_names$practice == "BVIAS_t"]
    & product_name %in% tmp_product_names$labels[tmp_product_names$plot == T]
    & FQS %in% tmp_FQS_names$labels[tmp_FQS_names$plot == T]) %>%
  # change names for conterfactuals
  filter(match == "no_match" | FQS == "Conventional") %>%
  mutate(FQS = factor(case_when(
    match == "no_match" ~ FQS,
    match != "no_match" ~ "Counterfactual"
  ))) %>%
  # add asterisk when signif
  mutate(
    stat_grp = case_when(
      match == "no_match" ~ stat_grp,
      match != "no_match" & padjust_bonf <= 0.05 ~ "*",
      .default = ""
  )) %>%
  # add plot_x
  mutate(
    plot_x = paste0(product_name,match,FQS)
  )


# plot order ----

tmp_plot_order <- tibble(
  plot_x = rev(c("Soft Wheatno_matchConventional",
                 "Soft Wheatno_matchOrganic Farming",
                 "Soft WheatBle_tendre__ABCounterfactual",
                 "Soft Wheatno_matchLabel Rouge",
                 "Soft WheatBle_tendre__LRCounterfactual",
                 "Grain Maizeno_matchConventional",
                 "Grain Maizeno_matchOrganic Farming",
                 "Grain MaizeMais_grain__ABCounterfactual",
                 "Milkno_matchConventional",
                 "Milkno_matchOrganic Farming",
                 "MilkLait__ABCounterfactual",
                 "Milkno_matchCharentes-Poitou Butter",
                 "MilkLait__Beurre de Charentes-PoitouCounterfactual",
                 "Milkno_matchComté - Morbier",
                 "MilkLait__Comte - MorbierCounterfactual"
                 )),
  labels = rev(c("Soft Wheat - Conventional",
                 "Soft Wheat - Organic Farming",
                 "Soft Wheat - Counterfactual Organic Farming",
                 "Soft Wheat - Label Rouge",
                 "Soft Wheat - Counterfactual Label Rouge",
                 "Grain Maize - Conventional",
                 "Grain Maize - Organic Farming",
                 "Grain Maize - Counterfactual Organic Farming",
                 "Milk - Conventional",
                 "Milk - Organic Farming",
                 "Milk - Counterfactual Organic Farming",
                 "Milk - Charentes-Poitou Butter",
                 "Milk - Counterfactual Charentes-Poitou Butter",
                 "Milk - Comte - Morbier",
                 "Milk - Counterfactual Comte - Morbier")))

tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
                               levels = tmp_plot_order$plot_x,
                               labels = tmp_plot_order$labels)
tmp_plot_data <- tmp_plot_data %>% 
  filter(!is.na(plot_x))
tmp_plot_data$production_type <- toupper(tmp_plot_data$production_type)

# plot ----

ggplot() +
    # mean
  geom_point(data = tmp_plot_data,
             aes(x = plot_x, y = mean, fill = FQS,colour = FQS),
             shape = 21, size=2, stroke = 1, position = position_dodge(width = 0.75)) +
  # CI95%
  geom_errorbar(data = tmp_plot_data,
                aes(x = plot_x, ymin = mean-1.96*(sd/sqrt(nobs)), ymax = mean+1.96*(sd/sqrt(nobs)), colour = FQS),
                linewidth=1,width = 0.5,position = position_dodge(width = 0.75)) +
  # sd
  geom_errorbar(data = tmp_plot_data,
                aes(x = plot_x, ymin = mean-sd, ymax = mean+sd, colour = FQS),
                linewidth=0.5,width = 0.5,linetype = "dashed",position = position_dodge(width = 0.75)) +
  # n
  geom_text(data = tmp_plot_data,
            aes(x = plot_x, y=max(mean+sd)*1.1,colour = FQS,label = paste0("n = ",as.character(nobs))),
            size=5,position = position_dodge(width = 1)) +
  # stat groups
  geom_text(data = tmp_plot_data,
            aes(x = plot_x,y=0,colour = FQS,label = stat_grp),
            size=5,position = position_dodge(width = 1))+
  # theme
  coord_flip() +
  ylim(c(0,max(tmp_plot_data$mean+tmp_plot_data$sd)*1.2)) +
#  ylim(c(min(tmp_plot_data$mean-tmp_plot_data$sd)*1.03,max(tmp_plot_data$mean+tmp_plot_data$sd)*1.2)) +
  facet_wrap(vars(production_type),scales = "free_y",ncol = 1) +
  labs(y = "BVIAS_t",x= "Produits") +
  scale_fill_manual(values = tmp_FQS_names$colors,labels = tmp_FQS_names$labels,) +
  scale_colour_manual(values = tmp_FQS_names$colors,labels = tmp_FQS_names$labels) +
  theme_light() +
  theme(legend.position = c(0,-1),
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_rect(
          color="#cccccc", fill="white", linewidth = 1, linetype="solid"),
        strip.text = element_text(colour = "#333333"))


```

## Practice_crops

```{r practice_crops}

library(dplyr)
library(tidyr)
library(ggplot2)


# plot data ----

tmp_plot_data <- tmp_table0 %>%
  # select only one practice for some products
  filter(
    practice_subset == "crops"
    & production_type == "crop"
    & product_name %in% tmp_product_names$labels[tmp_product_names$plot == T]
    & FQS %in% tmp_FQS_names$labels[tmp_FQS_names$plot == T]) %>%
  # add conventional mean
    inner_join(.,tmp_table0 %>%
              filter(FQS %in% c("Conventional","Counterfactual")) %>%
              group_by(product_name,match,practice) %>%
              reframe(mean_conv = mean,.groups = "keep"),
            by = join_by(product_name, practice, match)) %>%
  # change names for conterfactuals
  filter(match == "no_match" | FQS != "Conventional") %>%
  mutate(FQS = factor(case_when(
    match == "no_match" ~ FQS,
    match != "no_match" ~ "Counterfactual"
  ))) %>%
  # add asterisk when signif
  mutate(
    stat_grp = case_when(
      match == "no_match" ~ stat_grp,
      match != "no_match" & padjust_bonf <= 0.05 ~ "*",
      .default = ""
  )) %>%
  # add plot_x
  mutate(
    plot_x = paste0(product_name,match,FQS)
  )


# plot order ----

tmp_plot_order <- tibble(
  plot_x = rev(c("Soft Wheatno_matchConventional",
                 "Soft Wheatno_matchOrganic Farming",
                 "Soft WheatBle_tendre__ABCounterfactual",
                 "Soft Wheatno_matchLabel Rouge",
                 "Soft WheatBle_tendre__LRCounterfactual",
                 "Grain Maizeno_matchConventional",
                 "Grain Maizeno_matchOrganic Farming",
                 "Grain MaizeMais_grain__ABCounterfactual"
                 )),
  labels = rev(c("Soft Wheat - Conventional",
                 "Soft Wheat - Organic Farming",
                 "Soft Wheat - Counterfactual Organic Farming",
                 "Soft Wheat - Label Rouge",
                 "Soft Wheat - Counterfactual Label Rouge",
                 "Grain Maize - Conventional",
                 "Grain Maize - Organic Farming",
                 "Grain Maize - Counterfactual Organic Farming"
                 )))

tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
                               levels = tmp_plot_order$plot_x,
                               labels = tmp_plot_order$labels)
tmp_plot_data$production_type <- toupper(tmp_plot_data$production_type)

tmp_plot_data <- tmp_plot_data %>%
  mutate(
    both_pval = case_when(
      pval_tukey <= 0.05 ~ pval_tukey,
      padjust_bonf <= 0.05 ~ padjust_bonf,
      .default = NA
    ),
    both_mean_diff = case_when(
      both_pval <= 0.05 ~ mean/mean_conv,
      .default = 0
    )
  ) %>%
  mutate(
    comp = case_when(
      both_pval <= 0.05 & both_mean_diff < 1 ~ 1-both_mean_diff,
      both_pval <= 0.05 & both_mean_diff >= 1 ~ both_mean_diff,
      .default = 0
    ),
    comp_bin = case_when(
      both_mean_diff > 1 ~ T,
      .default = F
    )
  ) %>%
  mutate(
    text = case_when(
      FQS == "Counterfactual" ~ mean_conv,
      .default = mean
    )
  )


ggplot() +
  geom_count(data = tmp_plot_data,
             aes(x = practice, y = plot_x,
                 colour = comp_bin,
                 size = comp)
             ) +
  geom_text(data = tmp_plot_data,
             aes(x = practice, y = plot_x, label = format(text,scientific = T,digits = 2)),
            size = 3.5, angle = 45) +
  # theme
  #scale_color_binned(type = "viridis")+
  scale_size("Significant differences",range = c(0,15)
             ) +
  scale_color_discrete("FQS > Conventional") +
  labs(x = "Practices (rounded mean value)", y= "Products") +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1),
        text = element_text(size = 12))

```

## Practice herd
```{r practice_herd}

library(dplyr)
library(tidyr)
library(ggplot2)


# plot data ----

tmp_plot_data <- tmp_table0 %>%
  # select only one practice for some products
  filter(
    practice_subset == "herd"
    & production_type == "milk"
    & product_name %in% tmp_product_names$labels[tmp_product_names$plot == T]
    & FQS %in% tmp_FQS_names$labels[tmp_FQS_names$plot == T]) %>%
  # add conventional mean
    inner_join(.,tmp_table0 %>%
              filter(FQS %in% c("Conventional","Counterfactual")) %>%
              group_by(product_name,match,practice) %>%
              reframe(mean_conv = mean,.groups = "keep"),
            by = join_by(product_name, practice, match)) %>%
  # change names for conterfactuals
  filter(match == "no_match" | FQS != "Conventional") %>%
  mutate(FQS = factor(case_when(
    match == "no_match" ~ FQS,
    match != "no_match" ~ "Counterfactual"
  ))) %>%
  # add asterisk when signif
  mutate(
    stat_grp = case_when(
      match == "no_match" ~ stat_grp,
      match != "no_match" & padjust_bonf <= 0.05 ~ "*",
      .default = ""
  )) %>%
  # add plot_x
  mutate(
    plot_x = paste0(product_name,match,FQS)
  )


# plot order ----


tmp_plot_order <- tibble(
  plot_x = rev(c("Milkno_matchConventional",
                 "Milkno_matchOrganic Farming",
                 "MilkLait__ABCounterfactual",
                 "Milkno_matchCharentes-Poitou Butter",
                 "MilkLait__Beurre de Charentes-PoitouCounterfactual",
                 "Milkno_matchComté - Morbier",
                 "MilkLait__Comte - MorbierCounterfactual"
                 )),
  labels = rev(c("Milk - Conventional",
                 "Milk - Organic Farming",
                 "Milk - Counterfactual Organic Farming",
                 "Milk - Charentes-Poitou Butter",
                 "Milk - Counterfactual Charentes-Poitou Butter",
                 "Milk - Comte - Morbier",
                 "Milk - Counterfactual Comte - Morbier")))

tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
                               levels = tmp_plot_order$plot_x,
                               labels = tmp_plot_order$labels)
tmp_plot_data$production_type <- toupper(tmp_plot_data$production_type)

tmp_plot_data <- tmp_plot_data %>%
  mutate(
    both_pval = case_when(
      pval_tukey <= 0.05 ~ pval_tukey,
      padjust_bonf <= 0.05 ~ padjust_bonf,
      .default = NA
    ),
    both_mean_diff = case_when(
      both_pval <= 0.05 ~ mean/mean_conv,
      .default = 0
    )
  ) %>%
  mutate(
    comp = case_when(
      both_pval <= 0.05 & both_mean_diff < 1 ~ 1-both_mean_diff,
      both_pval <= 0.05 & both_mean_diff >= 1 ~ both_mean_diff,
      .default = 0
    ),
    comp_bin = case_when(
      both_mean_diff > 1 ~ T,
      .default = F
    )
  ) %>%
  mutate(
    text = case_when(
      FQS == "Counterfactual" ~ mean_conv,
      .default = mean
    )
  )


ggplot() +
  geom_count(data = tmp_plot_data,
             aes(x = practice, y = plot_x,
                 colour = comp_bin,
                 size = comp)
             ) +
  geom_text(data = tmp_plot_data,
             aes(x = practice, y = plot_x, label = format(text,scientific = T,digits = 2)),
            size = 3.25,angle = 45) +
  # theme
  scale_size("Significant differences",range = c(0,15)) +
  scale_color_discrete("FQS > Conventional") +
  labs(x = "Practices (rounded mean value)", y= "Products") +
  theme_light() +
  theme(axis.text.x = element_text(angle = 45,vjust = 1,hjust = 1),
        text = element_text(size = 12))

```

## Effect size

```{r}

table_ES <- readr::read_csv("d:/users/srhuet/documents/BiodivLabel/CASD_export/CASD_export_241017/table_ES_table2024-10-17.csv")

table_ES %>%
 filter(set %in% "optim") %>%
  mutate(land_use_type = toupper(land_use_type),
         id_col = factor(id_col,
                         levels = practice_names$crops$practice[practice_names$crops$practice %in% id_col],
                         labels = practice_names$crops$labels[practice_names$crops$practice %in% id_col])) %>%
 ggplot() +
  aes(x = id_col, y = BVIAS_ES_5_95, fill = land_use_type) +
  geom_bar(stat = "summary", fun = "sum", position = "dodge2") +
  # theme
  scale_fill_hue(direction = 1) +
  coord_flip() +
  facet_wrap(vars(land_use_type),scales = "free_x") +
  labs(x = "Practices", y = "Effect size (95th / 5th percentiles)") +
  theme_light() +
  theme(legend.position = c(0,-1),
        legend.direction = "horizontal",legend.title = element_blank(),
        strip.background = element_rect(
          color="#cccccc", fill="white", linewidth = 1, linetype="solid"),
        strip.text = element_text(colour = "#333333"))


```



# SM

## Tables

```{r tbl-results_crops}

#| tbl-label: tbl-results_crops

library(gt)

tmp_table <- tmp_table0 %>%
  filter(production_type == "crop") %>%
  select(!c(production_type,practice_subset)) %>%
  arrange(practice,product_name,FQS,match) %>%
  # groups
  mutate(product_name = ifelse(row_number() == 1,
                               as.character(product_name), ""),
         .by = c(practice, product_name)) %>%
  gt(groupname_col = "practice") %>%
  tab_style(
    style = list(
      cell_fill(color = "gray"),
      cell_text(weight = "bolder")
    ),
    locations = cells_row_groups(groups = everything())
  ) %>%
  # format numbers
  fmt_auto() %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = c(mean_conv_diff,pval_tukey),
      rows = pval_tukey <= 0.05
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = c(mean_diff_match,padjust_bonf),
      rows = padjust_bonf <= 0.05
    )
  ) %>%
  # replace NAs
  sub_missing(missing_text = "-") %>%
  # column labels
  tab_style(
    style = list(
      cell_text(weight = "bolder",size = "large")
    ),
    locations = cells_column_labels(everything())
  ) %>%
  cols_label(
    practice = "Pratiques",
    product_name = "Production",
    FQS = "Label",
    mean = "Moyenne",
    sd = "Ecart-Type",
    nobs = "Effectif",
    mean_conv_diff = "Différence avec la moyenne conventionnelle",
    pval_tukey = "Tukey HSD p-value",
    nobs = "Effectif apparié",
    mean_diff_match = "Différence avec la moyenne contrefactuelle",
    padjust_bonf = "Bonferroni adjusted t-test p-value"
  )

tmp_table

gtsave(tmp_table,
       paste0("table_practice_crops_",Sys.Date(),".html"),
       "data_out")

```

```{r tbl-results_diary_feed}

tmp_table <- tmp_table0 %>%
  filter(production_type == "milk"
         & practice %in% c(practice_names$BVIAS$labels,
                           practice_names$feed$labels)
         & FQS != "AOP - AOC") %>%
  select(!c(production_type,practice_subset,product_name)) %>%
  arrange(practice,FQS) %>%
  # groups
  gt(groupname_col = "practice") %>%
  tab_style(
    style = list(
      cell_fill(color = "gray"),
      cell_text(weight = "bolder")
    ),
    locations = cells_row_groups(groups = everything())
  ) %>%
  # format numbers
  fmt_auto() %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = c(mean_conv_diff,pval_tukey),
      rows = pval_tukey <= 0.05
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = c(mean_diff_match,padjust_bonf),
      rows = padjust_bonf <= 0.05
    )
  ) %>%
  # replace NAs
  sub_missing(missing_text = "-") %>%
  # column labels
  tab_style(
    style = list(
      cell_text(weight = "bolder",size = "large")
    ),
    locations = cells_column_labels(everything())
  ) %>%
  cols_label(
    practice = "Pratiques",
    FQS = "Label",
    FQS_mean = "Moyenne",
    std = "Ecart-Type",
    r = "Effectif",
    mean_conv_diff = "Différence avec la moyenne conventionnelle",
    pval_tukey = "Tukey HSD p-value",
    n_matched = "Effectif apparié",
    mean_diff_match = "Différence avec la moyenne contrefactuelle",
    padjust_bonf = "Bonferroni adjusted t-test p-value"
  )

tmp_table

gtsave(tmp_table,
       paste0("table_practice_diary_feed_",Sys.Date(),".html"),
       "data_out")

```

```{r tbl-results_diary_herd}

tmp_table <- tmp_table0 %>%
  filter(production_type == "milk"
         & practice %in% c(tmp_practice_names_BVIAS$labels,
                           tmp_practice_names_herd$labels)) %>%
  select(!c(production_type,practice_subset,product_name)) %>%
  arrange(practice,FQS) %>%
  # groups
  mutate(FQS = ifelse(row_number() == 1,
                      as.character(FQS), ""),
         .by = c(practice, FQS)) %>%
  gt(groupname_col = "practice") %>%
  tab_style(
    style = list(
      cell_fill(color = "gray"),
      cell_text(weight = "bolder")
    ),
    locations = cells_row_groups(groups = everything())
  ) %>%
  # format numbers
  fmt_auto() %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = c(mean_conv_diff,pval_tukey),
      rows = pval_tukey <= 0.05
    )
  ) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_body(
      columns = c(mean_diff_match,padjust_bonf),
      rows = padjust_bonf <= 0.05
    )
  ) %>%
  # replace NAs
  sub_missing(missing_text = "-") %>%
  # column labels
  tab_style(
    style = list(
      cell_text(weight = "bolder",size = "large")
    ),
    locations = cells_column_labels(everything())
  ) %>%
  cols_label(
    practice = "Pratiques",
    FQS = "Label",
    FQS_mean = "Moyenne",
    std = "Ecart-Type",
    r = "Effectif",
    mean_conv_diff = "Différence avec la moyenne conventionnelle",
    pval_tukey = "Tukey HSD p-value",
    n_matched = "Effectif apparié",
    mean_diff_match = "Différence avec la moyenne contrefactuelle",
    padjust_bonf = "Bonferroni adjusted t-test p-value"
  )

tmp_table

gtsave(tmp_table,
       paste0("table_practice_diary_herd_",Sys.Date(),".html"),
       "data_out")

```



