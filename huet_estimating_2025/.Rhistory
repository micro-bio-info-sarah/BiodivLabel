tmp_paired_ttest <- read.csv("../CASD_export/tmp_paired_ttest.csv")
tmp_paired_ttest_adjust <- tmp_paired_ttest %>%
mutate(padjust_bonf = p.adjust(pval_pttest,method = "bonferroni"),
padjust_fdr = p.adjust(pval_pttest,method = "fdr"))
# Table ----
tmp_table0 <- tmp_TukeyHSD %>%
mutate(diff_sans_match = loop2.my_var - conv_mean) %>%
select(practice,product_name,FQS,
production_type,practice_subset,
FQS_mean,std,r,diff_sans_match,pval_tukey) %>%
mutate(
diff_sans_match = case_when(
FQS == "Conventionnel" ~ NA,
.default = diff_sans_match
)
) %>%
# add matching results
left_join(.,
tmp_paired_ttest_adjust %>%
rename(FQS = label) %>%
filter(FQS != "Conventionnel") %>%
select(FQS,product_name,practice,
n_matched,mean_diff_match,padjust_fdr),
by = join_by(product_name, FQS, practice)
) %>%
# order factors
mutate(
practice = factor(practice,levels = tmp_practice_names$practice,labels = tmp_practice_names$labels,ordered = T),
product_name = factor(product_name,levels = tmp_product_names$product_name,labels = tmp_product_names$labels,ordered = T),
FQS = factor(FQS,levels = tmp_FQS_names$FQS,labels = tmp_FQS_names$labels,ordered = T)
)
View(tmp_table0)
library(gt)
library(dplyr)
tmp_table <- data.frame(
c0 = c("",rep("Addressing the main determinants of biodiversity loss related to agriculture",6)),
c1= c(
"Explicit and operational definition of biodiversity",
"Land use",
"Climate change",
"Pollution",
"Based on measured data, biodiversity or practices at the farm level",
"Allow a default estimate on any food product",
"Validation based on biodiversity measurements"
),
c2 = c(
"Specific diversity (other studies present a plurality of indicators including abundance, diversity, presence of rare/endemic species, etc.).No systematic link with the sixth extinction crisis.",
"Consideration of landscape effects. No consideration of yields",
"Not taken into account",
"Taking into account all pollution",
"Yes (biodiversity), but without guarantee on the representativeness of the plots (sample size often small, difficulty in covering all productions)",
"No (too few measurements to differentiate each product)",
"Yes (intrinsically)"
),
c3 = c(
"Degradation of natural state (or risk of extinction of species for other studies)",
"No account taken of landscape effects. Consideration of yields",
"Not considered by Lindner *et al.* (2022), but considered by other models",
"Taking into account the main pollutions without effect size",
"Yes (practices), but often incomplete and without representativeness assurance (life cycle inventories)",
"Differentiates the main products, and the organic FQS",
"No"
),
c4 = c(
"Implied definition",
"Consideration of landscape effects. No consideration of yields",
"Not taken into account",
"Taking into account the main pollutions without effect size",
"No (specification)",
"Differentiates many FQSs, but not products between them",
"No"
),
c5 = c(
"Degradation of natural state",
"Consideration of landscape effects and yields",
"Not taken into account",
"Taking into account the main pollutions with effect size",
"Yes (practices, sample provided and representative: FADN, AC, LPIS)",
"Differentiates the main products, and FQSs sufficiently represented",
"Yes (consensus orders of magnitude in the literature)"
)
) %>%
# add columns for color
mutate(
#col1 = c(0,0,0,0,0,0,0,0),
col2 = c(2,2,1,3,3,1,3),
col3 = c(3,2,2,2,2,3,1),
col4 = c(2,2,1,2,1,2,1),
col5 = c(3,3,1,3,3,3,3)
)
tmp_palette = c("#FF9999","#FFCC99", "#99CC99")
tmp_table %>%
gt(groupname_col = "c0") %>%
data_color(   columns = col2,
target_columns = c2,
rows = col2 >0,
method = "numeric",
palette = tmp_palette,
domain = c(1,3)
) %>%
data_color(   columns = col3,
target_columns = c3,
rows = col3 >0,
method = "numeric",
palette = tmp_palette,
domain = c(1,3)
) %>%
data_color(   columns = col4,
target_columns =c4,
rows = col4 >0,
method = "numeric",
palette = tmp_palette,
domain = c(1,3)
) %>%
data_color(   columns = col5,
target_columns = c5,
rows = col5 >0,
method = "numeric",
palette = tmp_palette,
domain = c(1,3)
) %>%
cols_hide(col2:col5) %>%
cols_label(
c1 = "",
c2 = "*In situ* observations (e.g., Tuck *et al.*, 2014)",
c3 = "Modelling from agricultural practices data (e.g., Lindner and Koch, 2022)",
c4 = "Modelling from specifications (e.g., Alliot *et al.*, 2021) ",
c5 = "BVIAS (this study)"
)
# https://gt.rstudio.com/reference/tab_row_group.html
#rm(tmp_table)
library(gt)
library(dplyr)
library(tidyr)
tmp_data <- read.csv("../CASD_export/tmp_data_RICA_RA_SIQO_summary.csv")
tmp_table <- tmp_data %>%
pivot_longer(cols = !c(OTEFDD,FQS),
names_to = "Variable",
values_to = "value") %>%
mutate(
Variable = case_when(
Variable == "IDENT" ~ "Nombre de fermes",
Variable == "crop_area_ha" ~ "Surface cultivée (ha)",
Variable == "grassland_area_ha" ~ "Surface en prairie permanente (ha)",
Variable == "nb_dairy_cow" ~ "Effectif de vaches laitières (nombre de tête)",
Variable == "wheat_yield_kg_ha" ~ "Rendement en blé (kg/ha)",
Variable == "milk_yield_kg_cow" ~ "Rendement en lait (L/vache)"
)
) %>%
pivot_wider(
id_cols = c(OTEFDD,Variable),
names_from = FQS,
values_from = value
)
tmp_table %>%
# groups
mutate(OTEFDD = ifelse(row_number() == 1,
as.character(OTEFDD), ""),
.by = OTEFDD) %>%
select(OTEFDD,Variable,Conventionnel,AB,SIQO) %>%
gt() %>%
cols_label(
OTEFDD = "OTEX",
AB = "Agriculture Biologique",
SIQO = "Autres SIQO"
) %>%
# replace NAs
sub_missing(missing_text = "-") %>%
# format numbers
fmt_auto()
library(tibble)
tmp_product_names <- tibble(
product_name = c(
"Ble tendre",
"Mais grain",
"Triticale",
"Melange cereales d'ete",
"Autres cereales",
"Conventionnel",
"Agriculture Biologique",
"Comte - Morbier",
"Beurre de Charentes-Poitou",
"AOP - AOC",
"Bleu d'Auvergne - Cantal",
"Fromages de Savoie",
"Munster"
),
labels = c(
"Blé tendre",
"Maïs grain",
"Triticale",
"Mélange céréales d'été",
"Autres céréales",
"Conventionnel",
"AB",
"Comté - Morbier",
"Beurre de Charentes-Poitou",
"AOP - AOC",
"Bleu d'Auvergne - Cantal",
"Fromages de Savoie",
"Munster"
)
)
tmp_FQS_names <- tibble(
FQS = c(
"Conventionnel",
"AB",
"LR",
"Comte - Morbier",
"Beurre de Charentes-Poitou",
"AOP - AOC",
"Bleu d'Auvergne - Cantal",
"Fromages de Savoie",
"Munster"
),
labels = c(
"Conventionnel",
"Agriculture Biologique",
"Label Rouge",
"Comté - Morbier",
"Beurre de Charentes-Poitou",
"AOP - AOC",
"Bleu d'Auvergne - Cantal",
"Fromages de Savoie",
"Munster"
)
)
# BVIAS
tmp_practice_names_BVIAS <- tibble(
practice = c("BVI_ha",
"BVI_kg"),
labels = c("BVIAS_ha",
"BVIAS_kg"))
# crops
tmp_practice_names_crops <- tibble(
practice = c("A.3.1_max",
"A.4.5_max",
"A.4.5_min_max",
"A.4.5_org_max",
"A.5.1_max",
"yield"),
labels = c("Travail du sol (L gazole / ha)",
"Fertilisation (kg N / ha)",
"Fertilisation (minérale)",
"Fertilisation (organique)",
"Produits phytosanitaires (€*/ ha)",
"Rendement (kg / ha)"))
# herd
tmp_practice_names_herd <- tibble(
practice = c("yield_l_pha",
"yield_l_panim",
"nb_cow_pha",
"cow_pMFA",
"feed_autonomy",
"kg_DM_panim_maize_produced",
#"kg_DM_panim_soy_meal",
"share_soybean",
#"share_concent_purchased",
"share_concent",
"MFA_pcow",
"MFA_pha_pseudofarm",
"ha_temp_pasture_pha_pseudofarm",
"grassland_share_pseudofarm"#,
#"grassland_share_farm"
),
labels = c("Rendement (L lait / ha pseudoferme)",
"Rendement (L lait / vache laitière)",
"Taux de chargement (vache laitière / ha pseudoferme)",
"Taux de chargement (vache laitière / ha SFP)",
"Autonomie alimentaire (kg d'aliment produits / kg d'aliments)",
"Maïs fourrage (kg de maïs fourrage produit sur l'exploitation / vache laitière)",
#"Tourteau de soja (kg de tourteau de soja acheté / vache laitière)",
"Part du tourteau de soja importé (kg tourteau de soja / kg d'aliments)",
#"Part des concentrés dans les aliments achetés (kg de concentrés / kg d'aliments achetés)",
"Part des concentrés dans l'alimentation (kg de concentrés / kg d'aliments)",
"Surface Fourragère Principale (SFP / vache laitière)",
"Part de la Surface Fourragère Principale (ha SFP / ha pseudoferme)",
"Part des prairies temporaires (ha prairie / ha pseudoferme)",
"Part des prairies permanentes (ha prairie / ha pseudoferme)"#,
#"Part des prairies permanentes (ha prairie / ha ferme)"
))
# feed
tmp_practice_names_feed <- tibble(
practice = c("feed_A.3.1_max",
"feed_A.4.5_max",
"feed_A.4.5_min_max",
"feed_A.4.5_org_max",
"feed_A.5.1_max",
"feed_yield"),
labels = c("Travail du sol (L gazole / ha)",
"Fertilisation (kg N / ha)",
"Fertilisation (minérale)",
"Fertilisation (organique)",
"Produits phytosanitaires (€* / ha)",
"Rendement (kg / ha)"))
# all
tmp_practice_names <- Reduce(rbind,list(
tmp_practice_names_BVIAS,
tmp_practice_names_crops,
tmp_practice_names_herd,
tmp_practice_names_feed
))
library(dplyr)
library(tidyr)
# data -----
tmp_TukeyHSD <- read.csv("../CASD_export/tmp_TukeyHSD.csv") %>%
mutate(
product_name = case_when(
product_name == "Maïs grain" ~ "Mais grain",.default = product_name),
pval_tukey = as.numeric(pval))
tmp_paired_ttest <- read.csv("../CASD_export/tmp_paired_ttest.csv")
tmp_paired_ttest_adjust <- tmp_paired_ttest %>%
mutate(padjust_bonf = p.adjust(pval_pttest,method = "bonferroni"),
padjust_fdr = p.adjust(pval_pttest,method = "fdr"))
# Table ----
tmp_table0 <- tmp_TukeyHSD %>%
mutate(diff_sans_match = loop2.my_var - conv_mean) %>%
select(practice,product_name,FQS,
production_type,practice_subset,
FQS_mean,std,r,diff_sans_match,pval_tukey) %>%
mutate(
diff_sans_match = case_when(
FQS == "Conventionnel" ~ NA,
.default = diff_sans_match
)
) %>%
# add matching results
left_join(.,
tmp_paired_ttest_adjust %>%
rename(FQS = label) %>%
filter(FQS != "Conventionnel") %>%
select(FQS,product_name,practice,
n_matched,mean_diff_match,padjust_fdr),
by = join_by(product_name, FQS, practice)
) %>%
# order factors
mutate(
practice = factor(practice,levels = tmp_practice_names$practice,labels = tmp_practice_names$labels,ordered = T),
product_name = factor(product_name,levels = tmp_product_names$product_name,labels = tmp_product_names$labels,ordered = T),
FQS = factor(FQS,levels = tmp_FQS_names$FQS,labels = tmp_FQS_names$labels,ordered = T)
)
library(dplyr)
library(tidyr)
library(ggplot2)
tmp_resp_var_w0_match <- readr::read_csv("../CASD_export/tmp_resp_var_w0_match.csv")
tmp_resp_var_w_match <- readr::read_csv("../CASD_export/tmp_resp_var_w_match.csv")
# plot data ----
tmp_plot_data <- tmp_resp_var_w0_match %>%
mutate(match = "no_match") %>%
rbind(.,tmp_resp_var_w_match %>%
# select only counterfactuals
filter(FQS == "Conventionnel")) %>%
# change matched counterfactual FQS for plot
mutate(
plot_x = case_when(
production_type == "crop" ~ paste0(product_name,match,FQS),
production_type == "milk" ~ paste0(match,product_name)),
# select my var
my_var = BVI_ha) %>%
# pivot wider
pivot_wider(.,id_cols = c(plot_x,production_type,product_name,FQS,match,n),names_from = statistique,values_from = my_var) %>%
# select only some products
filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
& match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
"NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier"))
# plot stat ----
tmp_plot_stat_TukeyHSD <- tmp_TukeyHSD %>%
mutate(match = "no_match") %>%
# select practice
filter(practice == "BVI_ha") %>%
# change matched counterfactual FQS for plot
mutate(
plot_x = case_when(
production_type == "crop" ~ paste0(product_name,match,FQS),
production_type == "milk" ~ paste0(match,product_name)))
tmp_plot_stat_pttest <- tmp_paired_ttest %>%
# select practice
filter(practice == "BVI_ha") %>%
# remove conterfactuals
filter(label != "Conventionnel") %>%
# add match
mutate(match = case_when(
product_RICA_CODE != "milk" ~ paste0(product_name,"__",label),
product_RICA_CODE == "milk" ~ paste0("NA__",label)
)) %>%
# add asterisk when signif
mutate(stat_grp = case_when(
pval_pttest <= 0.05 ~ "*",.default = ""
)) %>%
# change as matched counterfactual FQS for plot
mutate(
product_name = case_when(
product_RICA_CODE == "milk" ~ "Conventionnel",
product_RICA_CODE != "milk" ~ product_name),
FQS = "Conventionnel",
plot_x = case_when(
product_RICA_CODE != "milk" ~ paste0(product_name,match,"Conventionnel"),
product_RICA_CODE == "milk" ~ paste0(match,"Conventionnel")))
tmp_plot_stat <- rbind(
tmp_plot_stat_TukeyHSD %>% select(plot_x,product_name,FQS,match,stat_grp),
tmp_plot_stat_pttest %>% select(plot_x,product_name,FQS,match,stat_grp)) %>%
# select only some products
filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
& match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
"NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier"))
tmp_plot_data <- left_join(tmp_plot_data,tmp_plot_stat)
# plot colors ----
tmp_colors <- tibble(
FQS = c("AB","AB (en conversion)","AOP - AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP;LR","LR",
"Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"),
values = c("palegreen3","darkcyan","plum4","darkgrey","#333333","indianred4","goldenrod3","goldenrod3","indianred",
"plum4","plum4","goldenrod3","plum4","plum4"),
labels=c("AB","AB (en conversion)","AOP & AOC","Conventionnel","Contrefactuel","Contrefactuel_LR","IGP","IGP","Label Rouge",
"Comte - Morbier","Bleu d'Auvergne - Cantal","Fromages de Savoie","Munster","Beurre de Charentes-Poitou"))
names(tmp_colors$values) <- tmp_colors$FQS
names(tmp_colors$labels) <- tmp_colors$FQS
tmp_plot_data <- tmp_plot_data %>%
mutate(plot_color = case_when(
match != "no_match" & FQS == "Conventionnel" ~ "Contrefactuel",
.default = FQS
))
# plot order ----
tmp_plot_order <- tibble(
plot_x = rev(c("Ble tendreno_matchConventionnel",
"Ble tendreno_matchAB",
"Ble tendreBle tendre__ABConventionnel",
"Ble tendreno_matchLR",
"Ble tendreBle tendre__LRConventionnel",
"Mais grainno_matchConventionnel",
"Mais grainno_matchAB",
"Mais grainMais grain__ABConventionnel",
"no_matchConventionnel",
"no_matchAB",
"NA__ABConventionnel",
"no_matchBeurre de Charentes-Poitou",
"NA__Beurre de Charentes-PoitouConventionnel",
"no_matchComte - Morbier",
"NA__Comte - MorbierConventionnel")),
labels = rev(c("Blé tendre - Conventionnel",
"Blé tendre - AB",
"Blé tendre - Contrefactuel AB",
"Blé tendre - LR",
"Blé tendre - Contrefactuel LR",
"Maïs grain - Conventionnel",
"Maïs grain - AB",
"Maïs grain - Contrefactuel AB",
"Lait - Conventionnel",
"Lait - AB",
"Lait - Contrefactuel AB",
"Lait - Beurre de Charentes-Poitou",
"Lait - Contrefactuel Beurre de Charentes-Poitou",
"Lait - Comte - Morbier",
"Lait - Contrefactuel Comte - Morbier")))
tmp_plot_data$plot_x <- factor(tmp_plot_data$plot_x,
levels = tmp_plot_order$plot_x,
labels = tmp_plot_order$labels)
# plot ----
ggplot() +
# mean
geom_point(data = tmp_plot_data,
aes(x = plot_x, y = mean, fill = plot_color,colour = plot_color),
shape = 21, size=2, stroke = 1, position = position_dodge(width = 0.75)) +
# CI95%
geom_errorbar(data = tmp_plot_data,
aes(x = plot_x, ymin = mean-1.96*(sd/sqrt(n)), ymax = mean+1.96*(sd/sqrt(n)), colour = plot_color),
linewidth=1,width = 0.5,position = position_dodge(width = 0.75)) +
# sd
geom_errorbar(data = tmp_plot_data,
aes(x = plot_x, ymin = mean-sd, ymax = mean+sd, colour = plot_color),
linewidth=0.5,width = 0.5,linetype = "dashed",position = position_dodge(width = 0.75)) +
# n
geom_text(data = tmp_plot_data,
aes(x = plot_x, y=max(mean+sd)*1.1,colour = plot_color,label = paste0("n = ",as.character(n))),
size=3,position = position_dodge(width = 1)) +
# stat groups
geom_text(data = tmp_plot_data,
aes(x = plot_x,y=0,colour = plot_color,label = stat_grp),
size=3,position = position_dodge(width = 1))+
# theme
coord_flip() +
ylim(c(0,max(tmp_plot_data$mean+tmp_plot_data$sd)*1.2)) +
facet_wrap(vars(production_type),scales = "free_y",ncol = 1) +
labs(y = "BVIAS_ha",x= "Produits") +
scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
theme_light() +
theme(legend.position = c(0,0),
legend.direction = "horizontal",legend.title = element_blank())
quarto::quarto_render("index.qmd","html")
esquisse::esquisser(tmp_table0)
esquisse::esquisser(tmp_table0 %>% filter(practice == "BVIAS_ha"))
0.1^4
0.2^4
0.1^2
0.2^2
0.3^2
0.3^4
(0.1+0.3)^2
(0.2+0.2)^2
(0.1+0.3)^4
(0.2+0.2)^4
0.2^4+0.2^4
0.1^4+0.3^4
0.2^2+0.2^2
0.2^4+0.2^4
0.1^2+0.3^2
01/1000
0.1/1000
library(quarto)
quarto_render("index.qmd","docx")
quarto_render("index.qmd","docx")
quarto_render("index.qmd","docx")
