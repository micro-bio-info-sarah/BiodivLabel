label == "Conventionnel" & match %in% match[grep("Comte - Morbier",match)] ~"Contrefactuel_Comte - Morbier",
label == "Conventionnel" & match %in% match[grep("Beurre de Charentes-Poitou",match)] ~"Contrefactuel_Beurre de Charentes-Poitou",
.default = label
)) %>%
# choose displayed value
#mutate(plot_y = mean_diff_match) %>%
mutate(plot_y = mean) %>%
# add asterisk when signif
mutate(stat_grp = case_when(
padjust <= 0.05 ~ "*",.default = ""
)) %>%
# select only some products
filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
& match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
"NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier")) %>%
# facet practices
mutate(practice_subset = case_when(
practice %in% tmp_practice_names_crops$practice ~ "practice_crops",
practice %in% tmp_practice_names_herd$practice ~ "practice_herd",
practice %in% tmp_practice_names_feed$practice ~ "practice_feed",
.default = "BVI"
))
tmp_plot_data <- tmp_paired_ttest %>%
mutate(padjust = p.adjust(pval_pttest,method = "bonferroni")) %>%
# set FQS and conterfactuals
mutate(FQS = case_when(
label == "Conventionnel" & match %in% match[grep("AB",match)] ~ "Contrefactuel_AB",
label == "Conventionnel" & match %in% match[grep("LR",match)] ~ "Contrefactuel_LR",
label == "Conventionnel" & match %in% match[grep("Comte - Morbier",match)] ~"Contrefactuel_Comte - Morbier",
label == "Conventionnel" & match %in% match[grep("Beurre de Charentes-Poitou",match)] ~"Contrefactuel_Beurre de Charentes-Poitou",
.default = label
)) %>%
# choose displayed value
#mutate(plot_y = mean_diff_match) %>%
mutate(plot_y = mean) %>%
# add asterisk when signif
mutate(stat_grp = case_when(
padjust <= 0.05 ~ "*",.default = ""
)) %>%
# select only some products
filter(product_name %in% c("Ble tendre","Mais grain","Conventionnel","AB","Comte - Morbier","Beurre de Charentes-Poitou")
& match %in% c("no_match","Ble tendre__AB","Ble tendre__LR","Mais grain__AB",
"NA__AB","NA__Beurre de Charentes-Poitou","NA__Comte - Morbier")) %>%
# facet practices
mutate(practice_subset = case_when(
practice %in% tmp_practice_names_crops$practice ~ "practice_crops",
practice %in% tmp_practice_names_herd$practice ~ "practice_herd",
practice %in% tmp_practice_names_feed$practice ~ "practice_feed",
.default = "BVI"
))
# add y limit max
tmp_plot_data <- tmp_plot_data %>%
left_join(.,
tmp_plot_data %>% group_by(practice) %>% summarise(y_lim_max = max(plot_y+sd)) %>% ungroup(),
by = join_by(practice))
# plot colors ----
tmp_colors <- tibble(
FQS = c("AB","Contrefactuel_AB","LR","Contrefactuel_LR",
"Comte - Morbier","Contrefactuel_Comte - Morbier","Beurre de Charentes-Poitou","Contrefactuel_Beurre de Charentes-Poitou"),
values = c("palegreen3","darkgrey","indianred","#333333",
"plum4","#cccccc","darkcyan","#333333"),
labels=c("AB","Contrefactuel AB","LR","Contrefactuel LR",
"Comte - Morbier","Contrefactuel Comte - Morbier","Beurre de Charentes-Poitou","Contrefactuel Beurre de Charentes-Poitou"))
names(tmp_colors$values) <- tmp_colors$FQS
names(tmp_colors$labels) <- tmp_colors$FQS
tmp_plot_data$practice <- factor(tmp_plot_data$practice,
levels = tmp_practice_names$practice,
labels = tmp_practice_names$labels)
tmp_plot_data %>%
filter(practice_subset == "practice_crops" &
match %in% c("Ble tendre__AB","Ble tendre__LR","Mais grain__AB")) %>%
ggplot(.) +
# value
geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
# error bar
geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+sd, colour = FQS),position = "dodge") +
# stat groups
geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
# theme
coord_flip() +
facet_wrap(vars(practice,match), scales = "free", ncol = 3L) +
#geom_blank(data = tmp_facet_scale,aes( y = scale))+
labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
theme_minimal() +
theme(legend.position ="bottom",
legend.direction = "horizontal",legend.title = element_blank(),
strip.background = element_blank(),
strip.text = element_blank())
# practice
geom_col(aes(x = practice, y = mean, fill = FQS)) +
# stat groups
geom_text(aes(x = plot_x,y=0,colour = "black",label = stat_grp,fontface = "bold"),
size=12,position = position_dodge(width = 0.9)) +
# theme
facet_grid(rows = vars(practice), scales = "free_y",
labeller = label_wrap_gen(multi_line = TRUE)) +
geom_blank(data = tmp_facet_scale,aes( y = scale))+
labs(y = "Moyenne des diffÃ©rences avec les contrefactuels",x= "Produits") +
scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
theme_minimal() +
theme(legend.position ="bottom",
legend.direction = "horizontal",legend.title = element_blank())
tmp_plot_data %>%
filter(practice_facet == "practice_herd" &
product_RICA_CODE == "milk") %>%
ggplot(.) +
# value
geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
# error bar
geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+sd, colour = FQS),position = "dodge") +
# stat groups
geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
# theme
coord_flip() +
facet_wrap(vars(practice), scales = "free", ncol = 1L) +
#geom_blank(data = tmp_facet_scale,aes( y = scale))+
labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
theme_minimal() +
theme(legend.position ="bottom",
legend.direction = "horizontal",legend.title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank())
tmp_plot_data %>%
filter(practice_subset == "practice_herd" &
product_RICA_CODE == "milk") %>%
ggplot(.) +
# value
geom_col(aes(x = practice, y = plot_y, fill = FQS),position = "dodge") +
# error bar
geom_errorbar(aes(x=practice, ymin = 0, ymax = plot_y+sd, colour = FQS),position = "dodge") +
# stat groups
geom_text(aes(x = practice,y=y_lim_max,colour = FQS,label = stat_grp),
size=10,position = position_dodge(width = 0.9),vjust=0.75,hjust=0.5) +
# theme
coord_flip() +
facet_wrap(vars(practice), scales = "free", ncol = 1L) +
#geom_blank(data = tmp_facet_scale,aes( y = scale))+
labs(y = "Moyenne et intervalle de confiance (95%)",x= "Pratiques") +
scale_fill_manual(values = tmp_colors$values,labels = tmp_colors$labels,) +
scale_colour_manual(values = tmp_colors$values,labels = tmp_colors$labels) +
theme_minimal() +
theme(legend.position ="bottom",
legend.direction = "horizontal",legend.title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank())
7482.114 -
4636.540
(7482.114 -
4636.540)/7482.114
(6493.519-3361.254)/6493.519
(3643.153-2533.595)/3643.153
library(readr)
library(readxl)
library(tidyr)
library(dplyr)
library(tibble)
rm(list = names(.GlobalEnv)[grep("tmp",names(.GlobalEnv))])
#rm(list = ls())
# which data base are you using? either "FADN" or "RICA"
my_DB = "FADN"
load("data_in/FADN_2018.RData")
if (my_DB == "RICA") {
# transfert table
tmp_TT_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops") %>%
rename(crop = RICA_code_number)
tmp_input <- RICA_2020_veg %>%
# summaries areas by crops
group_by(IDENT,CODE3)%>%
summarise(
area_ha = sum(SUPER3*10^-2,na.rm = T)
) %>%
# add mineral nitrogen consumption (kg N)
left_join(.,RICA_2020 %>% select(IDENT,CONSON,AGBIO)) %>%
mutate(crop = CODE3,
org_farming = case_when(
AGBIO %in% c(2,4) ~ T,
.default = F
)) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0, # 7264 farms
# remove organic farms with CONSON>0, as mineral fertilization is supposed to be null in organic farms
!(org_farming == 1 & CONSON >0)
)
# 7069 farms
}
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
# Quantity of N used in mineral fertilisers
## INUSE_Q	H_SC_3031_Q	Quantity of N used in mineral fertilisers Quantity	in tonnes
select(ID,ORGANIC,INUSE_Q, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop),
org_farming = case_when(
ORGANIC %in% c(2,4) ~ T,
.default = F
)) %>%
rename(farm_id = ID) %>%
mutate(CONSON = INUSE_Q*10^3) %>%
# select variables and obs
select(farm_id,org_farming,crop,area_ha,CONSON) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0,
# remove organic farms with CONSON>0, as mineral fertilization is supposed to be null in organic farms
!(org_farming == 1 & CONSON >0)
)
}
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
select(ID,ORGANIC, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop),
org_farming = case_when(
ORGANIC %in% c(2,4) ~ T,
.default = F
)) %>%
rename(farm_id = ID) %>%
# select variables and obs
select(farm_id,org_farming,crop,area_ha) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0
)
}
tmp_input <-
tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep")
tmp_input <-
tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup()
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
select(ID,ORGANIC, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop),
org_farming = case_when(
ORGANIC %in% c(2,4) ~ T,
.default = F
)) %>%
rename(farm_id = ID) %>%
# select variables and obs
select(farm_id,org_farming,crop,area_ha) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0
)
}
tmp_input <-
tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup()
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
),
by = join_by(crop))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
select(ID,ORGANIC, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area_ha") %>%
mutate(crop = gsub("_TA","",crop),
org_farming = case_when(
ORGANIC %in% c(2,4) ~ T,
.default = F
)) %>%
rename(farm_id = ID) %>%
# select variables and obs
select(farm_id,org_farming,crop,area_ha) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0
)
}
tmp_input <- tmp_input %>%
left_join(.,
tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup(),
by = join_by(farm_id))
tmp_Shannon <- tmp_input %>%
group_by(farm_id) %>%
summarise(
Shannon = - sum( (area_ha / area_tot_ha) * log(area_ha/area_tot_ha)),
.groups = "keep")
tmp_Shannon <- tmp_input %>%
group_by(farm_id) %>%
summarise(
Shannon = - sum( (area_ha / area_tot_ha) * log(area_ha/area_tot_ha)),
.groups = "keep") %>%
ungroup()
plot(tmp_Shannon$Shannon)
library(esquisse)
esquisser(tmp_Shannon)
hist(tmp_Shannon$Shannon)
tmp_Simpson <- tmp_input %>%
group_by(farm_id) %>%
summarise(
Simpson = 1/ sum((
area_ha*(area_ha-1)
/ area_tot_ha*(area_tot_ha-1))^2
),
.groups = "keep") %>%
ungroup()
hist(tmp_Simpson$Simpson)
View(tmp_Simpson)
BV_A.3.3 = tmp_Shannon %>%
left_join(.,tmp_Simpson,by=join_by(farm_id)) %>%
mutate(A.3.3 = Simpson) %>%
filter(is.finite(A.3.3))
View(BV_A.3.3)
View(tmp_input)
4800+1400+5600+170+6700
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
),
by = join_by(crop))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
select(ID,ORGANIC, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area") %>%
mutate(
crop = gsub("_TA","",crop),
org_farming = case_when(ORGANIC %in% c(2,4) ~ T,.default = F),
area_ha = area*10^-2
) %>%
rename(farm_id = ID) %>%
# select variables and obs
select(farm_id,org_farming,crop,area_ha) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0
)
}
tmp_input <- tmp_input %>%
left_join(.,
tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup(),
by = join_by(farm_id))
tmp_Shannon <- tmp_input %>%
group_by(farm_id) %>%
summarise(
Shannon = - sum( (area_ha / area_tot_ha) * log(area_ha/area_tot_ha)),
.groups = "keep") %>%
ungroup()
hist(tmp_Shannon$Shannon)
tmp_Simpson <- tmp_input %>%
group_by(farm_id) %>%
summarise(
Simpson = 1/ sum((
area_ha*(area_ha-1)
/ area_tot_ha*(area_tot_ha-1))^2
),
.groups = "keep") %>%
ungroup()
hist(tmp_Simpson$Simpson)
BV_A.3.3 = tmp_Shannon %>%
left_join(.,tmp_Simpson,by=join_by(farm_id)) %>%
mutate(A.3.3 = Simpson) %>%
filter(is.finite(A.3.3))
hist(unique(tmp_input$area_tot_ha))
tmp_area_tot <- tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup()
hist(tmp_area_tot$area_tot_ha)
if (my_DB == "FADN") {
# transfert table
tmp_FADN_crops <- read_xlsx("data_in/supp_data.xlsx",sheet = "FADN_crop_code")
tmp_TT_crops0 <- read_xlsx("data_in/supp_data.xlsx",sheet = "TT_crops")
tmp_TT_crops <- left_join(
tmp_FADN_crops %>% rename(crop = code_letter),
tmp_TT_crops0 %>% rename(crop = FADN_code_letter) %>% select(crop,EPK_ferti_crop_name) %>%
group_by(crop) %>%
summarise(
EPK_ferti_crop_name = paste0(unique(na.omit(unlist(strsplit(EPK_ferti_crop_name,";")))),collapse = ";")
),
by = join_by(crop))
tmp_input <- FADN_18 %>%
# area in hectares for each crop
select(ID,ORGANIC, all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18)))) %>%
pivot_longer(cols = all_of(intersect(paste0(tmp_FADN_crops$code_letter,"_TA"),colnames(FADN_18))),
names_to = "crop",values_to = "area") %>%
mutate(
crop = gsub("_TA","",crop),
org_farming = case_when(ORGANIC %in% c(2,4) ~ T,.default = F),
area_ha = area
) %>%
rename(farm_id = ID) %>%
# select variables and obs
select(farm_id,org_farming,crop,area_ha) %>%
filter(
# keep only crops & grasslands with areas
area_ha > 0
)
}
tmp_area_tot <- tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup()
hist(tmp_area_tot$area_tot_ha)
quantile(tmp_area_tot$area_tot_ha)
FADN_18$COUNTRY == "FRA"
table(FADN_18$COUNTRY == "FRA")
# TEST
tmp_input <- tmp_input %>%
filter(farm_id %in% FADN_18$ID[FADN_18$COUNTRY =="FRA"])
tmp_area_tot <- tmp_input %>%
group_by(farm_id) %>%
summarise(area_tot_ha = sum(area_ha),.groups = "keep") %>%
ungroup()
hist(tmp_area_tot$area_tot_ha)
quantile(tmp_area_tot$area_tot_ha)
tmp_Shannon <- tmp_input %>%
left_join(.,tmp_area_tot,by = join_by(farm_id)) %>%
group_by(farm_id) %>%
summarise(
Shannon = - sum( (area_ha / area_tot_ha) * log(area_ha/area_tot_ha)),
.groups = "keep") %>%
ungroup()
hist(tmp_Shannon$Shannon)
tmp_Simpson <- tmp_input %>%
group_by(farm_id) %>%
summarise(
Simpson = 1/ sum((
area_ha*(area_ha-1)
/ area_tot_ha*(area_tot_ha-1))^2
),
.groups = "keep") %>%
ungroup()
tmp_Simpson <- tmp_input %>%
left_join(.,tmp_area_tot,by = join_by(farm_id)) %>%
group_by(farm_id) %>%
summarise(
Simpson = 1/ sum((
area_ha*(area_ha-1)
/ area_tot_ha*(area_tot_ha-1))^2
),
.groups = "keep") %>%
ungroup()
hist(tmp_Simpson$Simpson)
quantile(tmp_Shannon$Shannon)
quantile(tmp_Simpson$Simpson)
0.05*0.05
0.005*0.005
